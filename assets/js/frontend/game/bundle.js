/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var actions, communications, constants, create, game, globalVariables, preload, toolbox, update;

	  constants = __webpack_require__(1);

	  globalVariables = __webpack_require__(2);

	  toolbox = __webpack_require__(3);

	  communications = __webpack_require__(4);

	  actions = __webpack_require__(5);

	  preload = function() {
	    game.load.image('avatar', 'images/defaultAvatar.jpg');
	    game.load.image('background', 'images/background.png');
	    game.load.image('stageBackground', 'images/stageBackground.png');
	    game.load.spritesheet('playButton', 'images/playButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('prepareButton', 'images/prepareButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('leaveButton', 'images/leaveButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('raiseScoreButton', 'images/raiseScoreButton.png', constants.ROUND_BUTTON_SIZE, constants.ROUND_BUTTON_SIZE);
	    game.load.spritesheet('lowerScoreButton', 'images/lowerScoreButton.png', constants.ROUND_BUTTON_SIZE, constants.ROUND_BUTTON_SIZE);
	    game.load.spritesheet('setScoreButton', 'images/setScoreButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('passButton', 'images/passButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('surrenderButton', 'images/surrenderButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('selectSuitButton', 'images/selectSuitButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('settleCoveredCardsButton', 'images/settleCoveredCardsButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.image('back', 'images/back.png');
	    game.load.image('bigJoker', 'images/bigJoker.png');
	    game.load.image('smallJoker', 'images/smallJoker.png');
	    game.load.image('sevenOfSpades', 'images/sevenOfSpades.png');
	    game.load.image('sevenOfHearts', 'images/sevenOfHearts.png');
	    game.load.image('sevenOfClubs', 'images/sevenOfClubs.png');
	    game.load.image('sevenOfDiamonds', 'images/sevenOfDiamonds.png');
	    game.load.image('twoOfSpades', 'images/twoOfSpades.png');
	    game.load.image('twoOfHearts', 'images/twoOfHearts.png');
	    game.load.image('twoOfClubs', 'images/twoOfClubs.png');
	    game.load.image('twoOfDiamonds', 'images/twoOfDiamonds.png');
	    game.load.image('aceOfSpades', 'images/aceOfSpades.png');
	    game.load.image('kingOfSpades', 'images/kingOfSpades.png');
	    game.load.image('queenOfSpades', 'images/queenOfSpades.png');
	    game.load.image('jackOfSpades', 'images/jackOfSpades.png');
	    game.load.image('tenOfSpades', 'images/tenOfSpades.png');
	    game.load.image('nineOfSpades', 'images/nineOfSpades.png');
	    game.load.image('eightOfSpades', 'images/eightOfSpades.png');
	    game.load.image('sixOfSpades', 'images/sixOfSpades.png');
	    game.load.image('fiveOfSpades', 'images/fiveOfSpades.png');
	    game.load.image('aceOfHearts', 'images/aceOfHearts.png');
	    game.load.image('kingOfHearts', 'images/kingOfHearts.png');
	    game.load.image('queenOfHearts', 'images/queenOfHearts.png');
	    game.load.image('jackOfHearts', 'images/jackOfHearts.png');
	    game.load.image('tenOfHearts', 'images/tenOfHearts.png');
	    game.load.image('nineOfHearts', 'images/nineOfHearts.png');
	    game.load.image('eightOfHearts', 'images/eightOfHearts.png');
	    game.load.image('sixOfHearts', 'images/sixOfHearts.png');
	    game.load.image('fiveOfHearts', 'images/fiveOfHearts.png');
	    game.load.image('aceOfClubs', 'images/aceOfClubs.png');
	    game.load.image('kingOfClubs', 'images/kingOfClubs.png');
	    game.load.image('queenOfClubs', 'images/queenOfClubs.png');
	    game.load.image('jackOfClubs', 'images/jackOfClubs.png');
	    game.load.image('tenOfClubs', 'images/tenOfClubs.png');
	    game.load.image('nineOfClubs', 'images/nineOfClubs.png');
	    game.load.image('eightOfClubs', 'images/eightOfClubs.png');
	    game.load.image('sixOfClubs', 'images/sixOfClubs.png');
	    game.load.image('fiveOfClubs', 'images/fiveOfClubs.png');
	    game.load.image('aceOfDiamonds', 'images/aceOfDiamonds.png');
	    game.load.image('kingOfDiamonds', 'images/kingOfDiamonds.png');
	    game.load.image('queenOfDiamonds', 'images/queenOfDiamonds.png');
	    game.load.image('jackOfDiamonds', 'images/jackOfDiamonds.png');
	    game.load.image('tenOfDiamonds', 'images/tenOfDiamonds.png');
	    game.load.image('nineOfDiamonds', 'images/nineOfDiamonds.png');
	    game.load.image('eightOfDiamonds', 'images/eightOfDiamonds.png');
	    game.load.image('sixOfDiamonds', 'images/sixOfDiamonds.png');
	    game.load.image('fiveOfDiamonds', 'images/fiveOfDiamonds.png');
	    game.load.image('spade', 'images/spade.png');
	    game.load.image('heart', 'images/heart.png');
	    game.load.image('club', 'images/club.png');
	    game.load.image('diamond', 'images/diamond.png');
	    game.load.spritesheet('suites', 'images/suites.png', constants.MAIN_SUIT_ICON_SIZE, constants.MAIN_SUIT_ICON_SIZE);
	    game.load.image('rectangle', 'images/rectangle.png');
	    return game.load.image('makerIcon', 'images/makerIcon.png');
	  };

	  create = function() {
	    var titleOfAimedScores, titleOfChipsWon, titleOfCurrentScores, titleOfMainSuit, titleOfRoomName;
	    globalVariables.background = game.add.sprite(0, 0, 'background');
	    globalVariables.background.inputEnabled = true;
	    globalVariables.background.events.onInputDown.add(actions.backgroundTapped, this);
	    globalVariables.background.scale.setTo(globalVariables.screenWidth / constants.BACKGROUND_IMAGE_SIZE, globalVariables.screenHeight / constants.BACKGROUND_IMAGE_SIZE);
	    globalVariables.scaledCardWidth = Math.floor((globalVariables.screenWidth - constants.MARGIN * 2) / 8);
	    globalVariables.scaleWidthRatio = globalVariables.scaledCardWidth / constants.CARD_WIDTH;
	    globalVariables.scaledCardHeight = globalVariables.screenHeight / 5;
	    globalVariables.scaleHeightRatio = globalVariables.scaledCardHeight / constants.CARD_HEIGHT;
	    globalVariables.scaledCardWidth = constants.CARD_WIDTH * globalVariables.scaleWidthRatio;
	    globalVariables.scaledCardHeight = constants.CARD_HEIGHT * globalVariables.scaleHeightRatio;
	    globalVariables.cardsAtHand = game.add.group();
	    globalVariables.coveredCards = game.add.group();
	    globalVariables.selectSuitStage = game.add.group();
	    globalVariables.playCardsButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'playButton', actions.playSelectedCards, this, 1, 0, 1);
	    globalVariables.playCardsButton.visible = false;
	    globalVariables.prepareButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH - constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'prepareButton', actions.sendGetReadyMessage, this, 1, 0, 1);
	    globalVariables.leaveButton = game.add.button(game.world.centerX + constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'leaveButton', actions.leaveRoom, this, 1, 0, 1);
	    globalVariables.surrenderButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH - constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'surrenderButton', actions.surrender, this, 1, 0, 1);
	    globalVariables.surrenderButton.visible = false;
	    globalVariables.settleCoveredCardsButton = game.add.button(game.world.centerX + constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'settleCoveredCardsButton', actions.settleCoveredCards, this, 1, 0, 1);
	    globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	    globalVariables.settleCoveredCardsButton.inputEnabled = false;
	    globalVariables.settleCoveredCardsButton.visible = false;
	    globalVariables.selectSuitButton = game.add.button(game.world.centerX + constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'selectSuitButton', actions.selectSuit, this, 2, 2, 2);
	    globalVariables.selectSuitButton.inputEnabled = false;
	    globalVariables.selectSuitButton.visible = false;
	    globalVariables.currentUserPlayedCards = game.add.group();
	    globalVariables.user1PlayedCards = game.add.group();
	    globalVariables.user2PlayedCards = game.add.group();
	    globalVariables.user3PlayedCards = game.add.group();
	    titleOfMainSuit = game.add.text(globalVariables.screenWidth - 350, constants.MARGIN, '主牌', constants.TEXT_STYLE);
	    titleOfMainSuit.setTextBounds(0, 0, 70, 30);
	    globalVariables.iconOfMainSuit = game.add.sprite(globalVariables.screenWidth - 350 + 20, 2 * constants.MARGIN + 30, 'suites');
	    globalVariables.iconOfMainSuit.scale.setTo(30 / constants.MAIN_SUIT_ICON_SIZE, 30 / constants.MAIN_SUIT_ICON_SIZE);
	    globalVariables.iconOfMainSuit.frame = 0;
	    titleOfAimedScores = game.add.text(globalVariables.screenWidth - 280, constants.MARGIN, '叫分', constants.TEXT_STYLE);
	    titleOfAimedScores.setTextBounds(0, 0, 70, 30);
	    globalVariables.textOfAimedScores = game.add.text(globalVariables.screenWidth - 280, 2 * constants.MARGIN + 30, '80', constants.TEXT_STYLE);
	    globalVariables.textOfAimedScores.setTextBounds(0, 0, 70, 30);
	    titleOfCurrentScores = game.add.text(globalVariables.screenWidth - 210, constants.MARGIN, '得分', constants.TEXT_STYLE);
	    titleOfCurrentScores.setTextBounds(0, 0, 70, 30);
	    globalVariables.textOfCurrentScores = game.add.text(globalVariables.screenWidth - 210, 2 * constants.MARGIN + 30, '0', constants.TEXT_STYLE);
	    globalVariables.textOfCurrentScores.setTextBounds(0, 0, 70, 30);
	    titleOfChipsWon = game.add.text(globalVariables.screenWidth - 140, constants.MARGIN, '输赢', constants.TEXT_STYLE);
	    titleOfChipsWon.setTextBounds(0, 0, 70, 30);
	    globalVariables.textOfChipsWon = game.add.text(globalVariables.screenWidth - 140, 2 * constants.MARGIN + 30, '0', constants.TEXT_STYLE);
	    globalVariables.textOfChipsWon.setTextBounds(0, 0, 70, 30);
	    titleOfRoomName = game.add.text(globalVariables.screenWidth - 70, constants.MARGIN, '房间', constants.TEXT_STYLE);
	    titleOfRoomName.setTextBounds(0, 0, 70, 30);
	    globalVariables.textOfRoomName = game.add.text(globalVariables.screenWidth - 70, 2 * constants.MARGIN + 30, '', constants.TEXT_STYLE);
	    globalVariables.textOfRoomName.setTextBounds(0, 0, 70, 30);
	    globalVariables.meStatusText = game.add.text(game.world.centerX - constants.MARGIN, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 3 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET - constants.BUTTON_HEIGHT, '', constants.TEXT_STYLE);
	    globalVariables.player1StatusText = game.add.text(globalVariables.screenWidth - 2 * constants.AVATAR_SIZE - 3 * constants.MARGIN, game.world.centerY, '', constants.TEXT_STYLE);
	    globalVariables.player2StatusText = game.add.text(game.world.centerX - constants.MARGIN, constants.AVATAR_SIZE + 4 * constants.MARGIN, '', constants.TEXT_STYLE);
	    globalVariables.player3StatusText = game.add.text(constants.AVATAR_SIZE + 2 * constants.MARGIN, game.world.centerY, '', constants.TEXT_STYLE);
	    communications.getRoomInfo(game);
	    return communications.socketEventHandler(game);
	  };

	  update = function() {};

	  game = new Phaser.Game(globalVariables.screenWidth, globalVariables.screenHeight, Phaser.AUTO, '', {
	    preload: preload,
	    create: create,
	    update: update
	  });

	}).call(this);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  module.exports = {
	    BACKGROUND_IMAGE_SIZE: 200,
	    MAKER_ICON_SIZE: 30,
	    CARD_WIDTH: 180,
	    CARD_HEIGHT: 251,
	    SELECTED_CARD_Y_OFFSET: 40,
	    BUTTON_WIDTH: 150,
	    BUTTON_HEIGHT: 40,
	    MAIN_SUIT_ICON_SIZE: 100,
	    ROUND_BUTTON_SIZE: 70,
	    AVATAR_SIZE: 75,
	    INITIAL_NUM_CARDS_AT_HAND: 21,
	    NUM_OF_COVERED_CARDS: 8,
	    MARGIN: 20,
	    WHITE_COLOR: '#ffffff',
	    LARGE_TEXT_STYLE: {
	      font: "bold 32px Arial",
	      fill: "#fff",
	      boundsAlignH: "center",
	      boundsAlignV: "middle"
	    },
	    TEXT_STYLE: {
	      font: "bold 20px Arial",
	      fill: "#fff",
	      boundsAlignH: "center",
	      boundsAlignV: "middle"
	    },
	    RED_TEXT_STYLE: {
	      font: "bold 20px Arial",
	      fill: "#fa6161"
	    },
	    GAME_STATUS_NOT_STARTED: 0,
	    GAME_STATUS_SETTLING_COVERED_CARDS: 1,
	    GAME_STATUS_DECIDING_SUIT: 2,
	    GAME_STATUS_PLAYING: 3,
	    SUIT_ICON_SIZE: 50,
	    INDEX_SUIT_MAIN: 0,
	    INDEX_SUIT_SPADE: 1,
	    INDEX_SUIT_HEART: 2,
	    INDEX_SUIT_CLUB: 3,
	    INDEX_SUIT_DIAMOND: 4,
	    START_VALUE_FOR_MAIN: 1,
	    END_VALUE_FOR_MAIN: 10,
	    START_VALUE_FOR_SPADE: 11,
	    END_VALUE_FOR_SPADE: 19,
	    START_VALUE_FOR_HEART: 20,
	    END_VALUE_FOR_HEART: 28,
	    START_VALUE_FOR_CLUB: 29,
	    END_VALUE_FOR_CLUB: 37,
	    START_VALUE_FOR_DIAMOND: 38,
	    END_VALUE_FOR_DIAMOND: 46
	  };

	}).call(this);


/***/ },
/* 2 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  module.exports = {
	    screenWidth: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
	    screenHeight: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
	    userId: document.getElementById('userId').innerText,
	    username: document.getElementById('username').innerText,
	    loginToken: document.getElementById('loginToken').innerText,
	    roomName: document.getElementById('roomName').innerText,
	    scaledCardWidth: null,
	    scaledCardHeight: null,
	    scaleWidthRatio: null,
	    scaleHeightRatio: null,
	    currentUserPlayedCards: null,
	    user1PlayedCards: null,
	    user2PlayedCards: null,
	    user3PlayedCards: null,
	    isShowingCoveredCards: false,
	    cardsAtHand: null,
	    coveredCards: null,
	    background: null,
	    playCardsButton: null,
	    prepareButton: null,
	    leaveButton: null,
	    surrenderButton: null,
	    settleCoveredCardsButton: null,
	    startSwipeCardIndex: null,
	    endSwipeCardIndex: null,
	    iconOfMainSuit: null,
	    textOfCurrentScores: null,
	    textOfAimedScores: null,
	    textOfChipsWon: null,
	    textOfRoomName: null,
	    player1Username: null,
	    player2Username: null,
	    player3Username: null,
	    user1Avatar: null,
	    user2Avatar: null,
	    user3Avatar: null,
	    meStatusText: null,
	    player1IsMakerIcon: null,
	    player2IsMakerIcon: null,
	    player3IsMakerIcon: null,
	    player1StatusText: null,
	    player2StatusText: null,
	    player3StatusText: null,
	    callScoreStage: null,
	    selectMainStage: null,
	    gameStatus: null,
	    selectSuitButton: null,
	    selectSuitStage: null,
	    mainSuit: null
	  };

	}).call(this);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var constants, getAllPairValuesAtHandForSuit, getAllValuesOfMainAndMainSuit, getCardName, getCardValuesAtHandForSuit, getRelativeMainSuitValues, getStartAndEndValueForSuit, globalVariables, havePairForMainSuit, havePairForSuit, haveSingleForMainSuit, haveSingleForSuit, haveTractorForMainSuit, haveTractorForSuit, isPairForMainSuit, isPairForSuit, isSingleForMainSuit, isSingleForSuit, isTractorForMainSuit, isTractorForSuit, sortCards, validateSelectedCardsForPlay,
	    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	  constants = __webpack_require__(1);

	  globalVariables = __webpack_require__(2);

	  sortCards = function(array) {
	    var sortNumber;
	    sortNumber = function(a, b) {
	      return a - b;
	    };
	    return array.sort(sortNumber);
	  };

	  getCardName = function(n) {
	    var cardName;
	    cardName = '';
	    switch (n) {
	      case 1:
	        cardName = 'bigJoker';
	        break;
	      case 2:
	        cardName = 'smallJoker';
	        break;
	      case 3:
	        cardName = 'sevenOfSpades';
	        break;
	      case 4:
	        cardName = 'sevenOfHearts';
	        break;
	      case 5:
	        cardName = 'sevenOfClubs';
	        break;
	      case 6:
	        cardName = 'sevenOfDiamonds';
	        break;
	      case 7:
	        cardName = 'twoOfSpades';
	        break;
	      case 8:
	        cardName = 'twoOfHearts';
	        break;
	      case 9:
	        cardName = 'twoOfClubs';
	        break;
	      case 10:
	        cardName = 'twoOfDiamonds';
	        break;
	      case 11:
	        cardName = 'aceOfSpades';
	        break;
	      case 12:
	        cardName = 'kingOfSpades';
	        break;
	      case 13:
	        cardName = 'queenOfSpades';
	        break;
	      case 14:
	        cardName = 'jackOfSpades';
	        break;
	      case 15:
	        cardName = 'tenOfSpades';
	        break;
	      case 16:
	        cardName = 'nineOfSpades';
	        break;
	      case 17:
	        cardName = 'eightOfSpades';
	        break;
	      case 18:
	        cardName = 'sixOfSpades';
	        break;
	      case 19:
	        cardName = 'fiveOfSpades';
	        break;
	      case 20:
	        cardName = 'aceOfHearts';
	        break;
	      case 21:
	        cardName = 'kingOfHearts';
	        break;
	      case 22:
	        cardName = 'queenOfHearts';
	        break;
	      case 23:
	        cardName = 'jackOfHearts';
	        break;
	      case 24:
	        cardName = 'tenOfHearts';
	        break;
	      case 25:
	        cardName = 'nineOfHearts';
	        break;
	      case 26:
	        cardName = 'eightOfHearts';
	        break;
	      case 27:
	        cardName = 'sixOfHearts';
	        break;
	      case 28:
	        cardName = 'fiveOfHearts';
	        break;
	      case 29:
	        cardName = 'aceOfClubs';
	        break;
	      case 30:
	        cardName = 'kingOfClubs';
	        break;
	      case 31:
	        cardName = 'queenOfClubs';
	        break;
	      case 32:
	        cardName = 'jackOfClubs';
	        break;
	      case 33:
	        cardName = 'tenOfClubs';
	        break;
	      case 34:
	        cardName = 'nineOfClubs';
	        break;
	      case 35:
	        cardName = 'eightOfClubs';
	        break;
	      case 36:
	        cardName = 'sixOfClubs';
	        break;
	      case 37:
	        cardName = 'fiveOfClubs';
	        break;
	      case 38:
	        cardName = 'aceOfDiamonds';
	        break;
	      case 39:
	        cardName = 'kingOfDiamonds';
	        break;
	      case 40:
	        cardName = 'queenOfDiamonds';
	        break;
	      case 41:
	        cardName = 'jackOfDiamonds';
	        break;
	      case 42:
	        cardName = 'tenOfDiamonds';
	        break;
	      case 43:
	        cardName = 'nineOfDiamonds';
	        break;
	      case 44:
	        cardName = 'eightOfDiamonds';
	        break;
	      case 45:
	        cardName = 'sixOfDiamonds';
	        break;
	      case 46:
	        cardName = 'fiveOfDiamonds';
	    }
	    return cardName;
	  };

	  getStartAndEndValueForSuit = function(suitIndex) {
	    var endCardValueForSuit, startCardValueForSuit;
	    startCardValueForSuit = 0;
	    endCardValueForSuit = 0;
	    switch (suitIndex) {
	      case constants.INDEX_SUIT_MAIN:
	        startCardValueForSuit = constants.START_VALUE_FOR_MAIN;
	        endCardValueForSuit = constants.END_VALUE_FOR_MAIN;
	        break;
	      case constants.INDEX_SUIT_SPADE:
	        startCardValueForSuit = constants.START_VALUE_FOR_SPADE;
	        endCardValueForSuit = constants.END_VALUE_FOR_SPADE;
	        break;
	      case constants.INDEX_SUIT_HEART:
	        startCardValueForSuit = constants.START_VALUE_FOR_HEART;
	        endCardValueForSuit = constants.END_VALUE_FOR_HEART;
	        break;
	      case constants.INDEX_SUIT_CLUB:
	        startCardValueForSuit = constants.START_VALUE_FOR_CLUB;
	        endCardValueForSuit = constants.END_VALUE_FOR_CLUB;
	        break;
	      case constants.INDEX_SUIT_DIAMOND:
	        startCardValueForSuit = constants.START_VALUE_FOR_DIAMOND;
	        endCardValueForSuit = constants.END_VALUE_FOR_DIAMOND;
	    }
	    return [startCardValueForSuit, endCardValueForSuit];
	  };

	  getCardValuesAtHandForSuit = function(suitIndex, cardValuesAtHand) {
	    var cardValuesAtHandOfSuit, i, j, ref, startAndEndValuesForSuit;
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    cardValuesAtHandOfSuit = [];
	    for (i = j = 0, ref = cardValuesAtHand.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (cardValuesAtHand[i] >= startAndEndValuesForSuit[0] && cardValuesAtHand[i] <= startAndEndValuesForSuit[1]) {
	        cardValuesAtHandOfSuit.push(cardValuesAtHand[i]);
	      }
	    }
	    return cardValuesAtHandOfSuit;
	  };

	  getAllValuesOfMainAndMainSuit = function(mainSuit) {
	    var i, j, k, ref, ref1, ref2, ref3, startAndEndValuesForMain, startAndEndValuesForMainSuit, valuesOfMainAndMainSuit;
	    startAndEndValuesForMain = getStartAndEndValueForSuit(constants.INDEX_SUIT_MAIN);
	    startAndEndValuesForMainSuit = getStartAndEndValueForSuit(mainSuit);
	    valuesOfMainAndMainSuit = [];
	    for (i = j = ref = startAndEndValuesForMain[0], ref1 = startAndEndValuesForMain[1] + 1; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	      valuesOfMainAndMainSuit.push(i);
	    }
	    for (i = k = ref2 = startAndEndValuesForMainSuit[0], ref3 = startAndEndValuesForMainSuit[1] + 1; ref2 <= ref3 ? k < ref3 : k > ref3; i = ref2 <= ref3 ? ++k : --k) {
	      valuesOfMainAndMainSuit.push(i);
	    }
	    return valuesOfMainAndMainSuit;
	  };

	  getAllPairValuesAtHandForSuit = function(suitIndex, cardValuesAtHand) {
	    var cardValuesAtHandOfSuit, i, j, pairValues, ref;
	    cardValuesAtHandOfSuit = getCardValuesAtHandForSuit(suitIndex, cardValuesAtHand);
	    pairValues = [];
	    for (i = j = 0, ref = cardValuesAtHandOfSuit.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (cardValuesAtHandOfSuit[i] === cardValuesAtHandOfSuit[i + 1]) {
	        pairValues.push(cardValuesAtHandOfSuit[i]);
	      }
	    }
	    return pairValues;
	  };

	  getRelativeMainSuitValues = function(mainSuit) {
	    var mainSuitValues;
	    mainSuitValues = {};
	    switch (mainSuit) {
	      case constants.INDEX_SUIT_SPADE:
	        mainSuitValues.valueOfMainSuitOfSeven = 3;
	        mainSuitValues.valuesOfRestSuitsOfSeven = [4, 5, 6];
	        mainSuitValues.valueOfMainSuitOfTwo = 7;
	        mainSuitValues.valuesOfRestSuitsOfTwo = [8, 9, 10];
	        mainSuitValues.valueOfMainSuitOfAce = 11;
	        break;
	      case constants.INDEX_SUIT_HEART:
	        mainSuitValues.valueOfMainSuitOfSeven = 4;
	        mainSuitValues.valuesOfRestSuitsOfSeven = [3, 5, 6];
	        mainSuitValues.valueOfMainSuitOfTwo = 8;
	        mainSuitValues.valuesOfRestSuitsOfTwo = [7, 9, 10];
	        mainSuitValues.valueOfMainSuitOfAce = 20;
	        break;
	      case constants.INDEX_SUIT_CLUB:
	        mainSuitValues.valueOfMainSuitOfSeven = 5;
	        mainSuitValues.valuesOfRestSuitsOfSeven = [3, 4, 6];
	        mainSuitValues.valueOfMainSuitOfTwo = 9;
	        mainSuitValues.valuesOfRestSuitsOfTwo = [7, 8, 10];
	        mainSuitValues.valueOfMainSuitOfAce = 29;
	        break;
	      case constants.INDEX_SUIT_DIAMOND:
	        mainSuitValues.valueOfMainSuitOfSeven = 6;
	        mainSuitValues.valuesOfRestSuitsOfSeven = [3, 4, 5];
	        mainSuitValues.valueOfMainSuitOfTwo = 10;
	        mainSuitValues.valuesOfRestSuitsOfTwo = [7, 8, 9];
	        mainSuitValues.valueOfMainSuitOfAce = 38;
	    }
	    return mainSuitValues;
	  };

	  haveSingleForSuit = function(suitIndex, cardValuesAtHand) {
	    var cardValuesAtHandOfSuit;
	    cardValuesAtHandOfSuit = getCardValuesAtHandForSuit(suitIndex, cardValuesAtHand);
	    if (cardValuesAtHandOfSuit.length > 0) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  haveSingleForMainSuit = function(mainSuit, cardValuesAtHand) {
	    var cardValuesAtHandForMain, cardValuesAtHandForMainSuit;
	    cardValuesAtHandForMain = getCardValuesAtHandForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
	    cardValuesAtHandForMainSuit = getCardValuesAtHandForSuit(mainSuit, cardValuesAtHand);
	    if (cardValuesAtHandForMain.length > 0 || cardValuesAtHandForMainSuit.length > 0) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  havePairForSuit = function(suitIndex, cardValuesAtHand) {
	    var cardValuesAtHandOfSuit, i, j, ref;
	    cardValuesAtHandOfSuit = getCardValuesAtHandForSuit(suitIndex, cardValuesAtHand);
	    for (i = j = 0, ref = cardValuesAtHandOfSuit.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (cardValuesAtHandOfSuit[i] === cardValuesAtHandOfSuit[i + 1]) {
	        return true;
	      }
	    }
	    return false;
	  };

	  havePairForMainSuit = function(mainSuit, cardValuesAtHand) {
	    var cardValuesAtHandForMain, cardValuesAtHandForMainSuit, i, j, mains, ref;
	    cardValuesAtHandForMain = getCardValuesAtHandForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
	    cardValuesAtHandForMainSuit = getCardValuesAtHandForSuit(mainSuit, cardValuesAtHand);
	    mains = cardValuesAtHandForMain.concat(cardValuesAtHandForMainSuit);
	    for (i = j = 0, ref = mains.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (mains[i] === mains[i + 1]) {
	        return true;
	      }
	    }
	    return false;
	  };

	  haveTractorForSuit = function(tractorLength, suitIndex, cardValuesAtHand) {
	    var i, j, numOfConsecutivePairs, pairValuesAtHandOfSuit, ref;
	    pairValuesAtHandOfSuit = getAllPairValuesAtHandForSuit(suitIndex, cardValuesAtHand);
	    if (pairValuesAtHandOfSuit.length < tractorLength) {
	      return false;
	    }
	    numOfConsecutivePairs = 0;
	    for (i = j = 0, ref = pairValuesAtHandOfSuit.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if ((pairValuesAtHandOfSuit.length - i) < tractorLength) {
	        return false;
	      }
	      if ((pairValuesAtHandOfSuit[i] + 1) === pairValuesAtHandOfSuit[i + 1]) {
	        numOfConsecutivePairs += 1;
	        if (numOfConsecutivePairs === tractorLength) {
	          return true;
	        }
	      } else {
	        numOfConsecutivePairs = 0;
	      }
	    }
	    return false;
	  };

	  haveTractorForMainSuit = function(tractorLength, mainSuit, cardValuesAtHand) {
	    var i, j, mainSuitValues, numOfConsecutivePairs, pairValuesAtHandOfMain, pairValuesAtHandOfSuit, pairs, ref, ref1, ref2, ref3, ref4, ref5, ref6;
	    pairValuesAtHandOfMain = getAllPairValuesAtHandForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
	    pairValuesAtHandOfSuit = getAllPairValuesAtHandForSuit(mainSuit, cardValuesAtHand);
	    pairs = pairValuesAtHandOfMain.concat(pairValuesAtHandOfSuit);
	    numOfConsecutivePairs = 0;
	    mainSuitValues = getRelativeMainSuitValues(mainSuit);
	    for (i = j = 0, ref = pairs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if ((pairs.length - i) < tractorLength) {
	        return false;
	      }
	      if ((pairs[i] === 1 && pairs[i + 1] === 2) || (pairs[i] === 2 && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfSeven) || (pairs[i] === mainSuitValues.valueOfMainSuitOfSeven && (ref1 = pairs[i + 1], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref1) >= 0)) || ((ref2 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref2) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfSeven) || ((ref3 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref3) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfTwo) || (pairs[i] === mainSuitValues.valueOfMainSuitOfTwo && (ref4 = pairs[i + 1], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref4) >= 0)) || ((ref5 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref5) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfTwo) || ((ref6 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref6) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfAce) || (pairs[i] >= mainSuitValues.valueOfMainSuitOfAce && (pairs[i] + 1) === pairs[i + 1])) {
	        numOfConsecutivePairs += 1;
	        if (numOfConsecutivePairs === tractorLength) {
	          return true;
	        }
	      } else {
	        numOfConsecutivePairs = 0;
	      }
	    }
	    return false;
	  };

	  isSingleForSuit = function(suitIndex, cardValues) {
	    var startAndEndValuesForSuit;
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    if (cardValues.length === 1 && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[0] <= startAndEndValuesForSuit[1]) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isSingleForMainSuit = function(mainSuit, cardValues) {
	    var ref, valuesOfMainAndMainSuit;
	    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
	    if (cardValues.length === 1 && (ref = cardValues[0], indexOf.call(valuesOfMainAndMainSuit, ref) >= 0)) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isPairForSuit = function(suitIndex, cardValues) {
	    var startAndEndValuesForSuit;
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[1] <= startAndEndValuesForSuit[1]) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isPairForMainSuit = function(mainSuit, cardValues) {
	    var ref, valuesOfMainAndMainSuit;
	    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
	    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && (ref = cardValues[i], indexOf.call(valuesOfMainAndMainSuit, ref) >= 0)) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isTractorForSuit = function(tractorLength, suitIndex, cardValues) {
	    var i, startAndEndValuesForSuit;
	    if (cardValues.length < tractorLength * 2 || cardValues.length % 2 !== 0) {
	      return false;
	    }
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    if (cardValues[0] < startAndEndValuesForSuit[0] || cardValues[cardValues.length - 1] > startAndEndValuesForSuit[1]) {
	      return false;
	    }
	    i = 0;
	    while (i < (cardValues.length - 2)) {
	      if (cardValues[i] !== cardValues[i + 1] || (cardValues[i] + 1) !== cardValues[i + 2]) {
	        return false;
	      }
	      i += 2;
	    }
	    return true;
	  };

	  isTractorForMainSuit = function(tractorLength, mainSuit, cardValues) {
	    var i, j, mainSuitValues, ref, ref1, ref2, ref3, ref4, ref5, valuesOfMainAndMainSuit;
	    if (cardValues.length < tractorLength * 2 || cardValues.length % 2 !== 0) {
	      return false;
	    }
	    mainSuitValues = getRelativeMainSuitValues(mainSuit);
	    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
	    for (i = j = 0, ref = cardValues.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (ref1 = cardValues[i], indexOf.call(valuesOfMainAndMainSuit, ref1) < 0) {
	        return false;
	      }
	    }
	    i = 0;
	    while (i < (cardValues.length - 2)) {
	      if (cardValues[i] !== cardValues[i + 1]) {
	        return false;
	      } else if (cardValues[i] === 1 && cardValues[i + 2] !== 2) {
	        return false;
	      } else if (cardValues[i] === 2 && cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfSeven) {
	        return false;
	      } else if (cardValues[i] === mainSuitValues.valueOfMainSuitOfSeven && (ref2 = cardValues[i + 2], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref2) < 0)) {
	        return false;
	      } else if ((ref3 = cardValues[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref3) >= 0) && (cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfSeven && cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfTwo)) {
	        return false;
	      } else if (cardValues[i] === mainSuitValues.valueOfMainSuitOfTwo && (ref4 = cardValues[i + 2], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref4) < 0)) {
	        return false;
	      } else if ((ref5 = cardValues[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref5) >= 0) && (cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfTwo && cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfAce)) {
	        return false;
	      } else if (cardValues[i] >= mainSuitValues.valueOfMainSuitOfAce && (cardValues[i] + 1) !== cardValues[i + 2]) {
	        return false;
	      }
	      i += 2;
	    }
	    return true;
	  };

	  validateSelectedCardsForPlay = function(selectedCardValues, firstlyPlayedCardValues, cardValuesAtHand, mainSuit) {
	    var suitForFirstlyPlayedCards;
	    if (selectedCardValues.length === 0) {
	      return false;
	    }
	    if (firstlyPlayedCardValues.length > 0) {
	      suitForFirstlyPlayedCards = null;
	      if (isSingleForSuit(constants.INDEX_SUIT_MAIN, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_MAIN;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_SPADE, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_SPADE;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_HEART, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_HEART;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_CLUB, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_CLUB;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_DIAMOND, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_DIAMOND;
	      }
	      if (selectedCardValues.length !== firstlyPlayedCardValues.length) {
	        return false;
	      }
	      if (isSingleForMainSuit(mainSuit, firstlyPlayedCardValues)) {
	        if (haveSingleForMainSuit(mainSuit, cardValuesAtHand && !isSingleForMainSuit(mainSuit, selectedCardValues))) {
	          return false;
	        }
	      }
	      if (isSingleForSuit(suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
	        if (haveSingleForSuit(suitForFirstlyPlayedCards, cardValuesAtHand && !isSingleForSuit(suitForFirstlyPlayedCards, selectedCardValues))) {
	          return false;
	        }
	      }
	      if (isPairForMainSuit(mainSuit, firstlyPlayedCardValues)) {
	        if (havePairForMainSuit(mainSuit, cardValuesAtHand && !isPairForMainSuit(mainSuit, selectedCardValues))) {
	          return false;
	        }
	      }
	      if (isPairForSuit(suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
	        if (havePairForSuit(suitForFirstlyPlayedCards, cardValuesAtHand && !isPairForSuit(suitForFirstlyPlayedCards, selectedCardValues))) {
	          return false;
	        }
	      }
	      if (firstlyPlayedCardValues.length % 2 === 0) {
	        if (isTractorForMainSuit(firstlyPlayedCardValues.length / 2, mainSuit, firstlyPlayedCardValues)) {
	          if (haveTractorForMainSuit(firstlyPlayedCardValues.length / 2, mainSuit, cardValuesAtHand && !isTractorForMainSuit(selectedCardValues.length / 2, mainSuit, selectedCardValues))) {
	            return false;
	          }
	        }
	        if (isTractorForSuit(firstlyPlayedCardValues.length / 2, suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
	          if (haveTractorForSuit(firstlyPlayedCardValues.length / 2, suitForFirstlyPlayedCards, cardValuesAtHand && !isTractorForSuit(selectedCardValues.length / 2, suitForFirstlyPlayedCards, selectedCardValues))) {
	            return false;
	          }
	        }
	      }
	    } else {
	      if (selectedCardValues.length > 1 && selectedCardValues.length % 2 !== 0) {
	        return false;
	      }
	      if (selectedCardValues.length === 2 && selectedCardValues[0] !== selectedCardValues[1]) {
	        return false;
	      }
	      if (selectedCardValues.length >= 4) {
	        if (!isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_SPADE, selectedCardValues && !isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_HEART, selectedCardValues && !isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_CLUB, selectedCardValues && !isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_DIAMOND, selectedCardValues && !isTractorForMainSuit(selectedCardValues.length / 2, mainSuit, selectedCardValues)))))) {
	          return false;
	        }
	      }
	    }
	    return true;
	  };

	  module.exports = {
	    sortCards: sortCards,
	    getCardName: getCardName,
	    validateSelectedCardsForPlay: validateSelectedCardsForPlay,
	    getCardValuesAtHandForSuit: getCardValuesAtHandForSuit,
	    havePairForSuit: havePairForSuit,
	    haveSingleForSuit: haveSingleForSuit,
	    getAllPairValuesAtHandForSuit: getAllPairValuesAtHandForSuit,
	    haveTractorForSuit: haveTractorForSuit
	  };

	}).call(this);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var actions, constants, getRoomInfo, globalVariables, socketEventHandler, toolbox;

	  constants = __webpack_require__(1);

	  actions = __webpack_require__(5);

	  toolbox = __webpack_require__(3);

	  globalVariables = __webpack_require__(2);

	  getRoomInfo = function(game) {
	    return io.socket.get('/get_room_info', {
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      var diff, i, j, k, readyPlayers, ref, ref1, ref2, results, seatIndexOfCurrentUser, seats, usernames;
	      if (jwres.statusCode === 200) {
	        globalVariables.textOfRoomName.text = resData.roomName;
	        usernames = resData.usernames;
	        seats = [resData.seats.one, resData.seats.two, resData.seats.three, resData.seats.four];
	        seatIndexOfCurrentUser = seats.indexOf(globalVariables.username);
	        for (i = j = ref = seatIndexOfCurrentUser + 1, ref1 = seatIndexOfCurrentUser + 4; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	          if (seats[i % 4] !== '') {
	            diff = i - seatIndexOfCurrentUser;
	            switch (diff) {
	              case 1 || -3:
	                actions.showPlayer1Info(game, seats[i % 4]);
	                break;
	              case 2 || -2:
	                actions.showPlayer2Info(game, seats[i % 4]);
	                break;
	              case 3 || -1:
	                actions.showPlayer3Info(game, seats[i % 4]);
	            }
	          }
	        }
	        readyPlayers = resData.readyPlayers;
	        results = [];
	        for (i = k = 0, ref2 = readyPlayers.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
	          if (globalVariables.player1Username) {
	            if (readyPlayers[i] === globalVariables.player1Username.text) {
	              globalVariables.player1StatusText.text = 'Ready';
	            }
	          }
	          if (globalVariables.player2Username) {
	            if (readyPlayers[i] === globalVariables.player2Username.text) {
	              globalVariables.player2StatusText.text = 'Ready';
	            }
	          }
	          if (globalVariables.player3Username) {
	            if (readyPlayers[i] === globalVariables.player3Username.text) {
	              results.push(globalVariables.player3StatusText.text = 'Ready');
	            } else {
	              results.push(void 0);
	            }
	          } else {
	            results.push(void 0);
	          }
	        }
	        return results;
	      }
	    });
	  };

	  socketEventHandler = function(game) {
	    io.socket.on('newPlayerJoined', function(data) {
	      var diff, newPlayerUsername, seatIndexOfCurrentUser, seatIndexOfNewPlayer, seats;
	      newPlayerUsername = data.newPlayer;
	      seats = [data.seats.one, data.seats.two, data.seats.three, data.seats.four];
	      seatIndexOfCurrentUser = seats.indexOf(globalVariables.username);
	      seatIndexOfNewPlayer = seats.indexOf(newPlayerUsername);
	      diff = seatIndexOfNewPlayer - seatIndexOfCurrentUser;
	      if (diff === 1 || diff === -3) {
	        actions.showPlayer1Info(game, newPlayerUsername);
	      }
	      if (diff === 2 || diff === -2) {
	        actions.showPlayer2Info(game, newPlayerUsername);
	      }
	      if (diff === 3 || diff === -1) {
	        actions.showPlayer3Info(game, newPlayerUsername);
	      }
	    });
	    io.socket.on('playerLeavedRoom', function(data) {
	      var leftUsername;
	      leftUsername = data.username;
	      return actions.hideLeftPlayer(leftUsername);
	    });
	    io.socket.on('playerReady', function(data) {
	      var readyUsername;
	      readyUsername = data.username;
	      if (globalVariables.player1Username) {
	        if (readyUsername === globalVariables.player1Username.text) {
	          globalVariables.player1StatusText.text = 'Ready';
	        }
	      }
	      if (globalVariables.player2Username) {
	        if (readyUsername === globalVariables.player2Username.text) {
	          globalVariables.player2StatusText.text = 'Ready';
	        }
	      }
	      if (globalVariables.player3Username) {
	        if (readyUsername === globalVariables.player3Username.text) {
	          return globalVariables.player3StatusText.text = 'Ready';
	        }
	      }
	    });
	    io.socket.on('cardsSent', function(data) {
	      var usernameToCallScore;
	      globalVariables.cardsAtHand.values = data.cards;
	      globalVariables.cardsAtHand.values = data.cards;
	      usernameToCallScore = data.usernameToCallScore;
	      globalVariables.cardsAtHand.values = toolbox.sortCards(globalVariables.cardsAtHand.values);
	      actions.displayCards(globalVariables.cardsAtHand.values);
	      globalVariables.meStatusText.text = '';
	      globalVariables.player1StatusText.text = '';
	      globalVariables.player2StatusText.text = '';
	      globalVariables.player3StatusText.text = '';
	      globalVariables.textOfAimedScores.text = '80';
	      globalVariables.textOfCurrentScores.text = '0';
	      if (usernameToCallScore === globalVariables.username) {
	        return actions.showCallScorePanel(game, 80);
	      } else {
	        if (usernameToCallScore === globalVariables.player1Username.text) {
	          return globalVariables.player1StatusText.text = '叫分中...';
	        } else if (usernameToCallScore === globalVariables.player2Username.text) {
	          return globalVariables.player2StatusText.text = '叫分中...';
	        } else if (usernameToCallScore === globalVariables.player3Username.text) {
	          return globalVariables.player3StatusText.text = '叫分中...';
	        }
	      }
	    });
	    io.socket.on('userCalledScore', function(data) {
	      var currentAimedScore, usernameCalledScore, usernameToCallScore;
	      currentAimedScore = data.currentAimedScore;
	      usernameCalledScore = data.usernameCalledScore;
	      usernameToCallScore = data.usernameToCallScore;
	      globalVariables.textOfAimedScores.text = '' + currentAimedScore;
	      if (usernameToCallScore === globalVariables.username) {
	        globalVariables.meStatusText.text = '叫分中...';
	        actions.showCallScorePanel(game, currentAimedScore);
	      } else if (usernameToCallScore === globalVariables.player1Username.text) {
	        globalVariables.player1StatusText.text = '叫分中...';
	      } else if (usernameToCallScore === globalVariables.player2Username.text) {
	        globalVariables.player2StatusText.text = '叫分中...';
	      } else if (usernameToCallScore === globalVariables.player3Username.text) {
	        globalVariables.player3StatusText.text = '叫分中...';
	      }
	      if (usernameCalledScore === globalVariables.player1Username.text) {
	        return globalVariables.player1StatusText.text = currentAimedScore + '分';
	      } else if (usernameCalledScore === globalVariables.player2Username.text) {
	        return globalVariables.player2StatusText.text = currentAimedScore + '分';
	      } else if (usernameCalledScore === globalVariables.player3Username.text) {
	        return globalVariables.player3StatusText.text = currentAimedScore + '分';
	      }
	    });
	    io.socket.on('userPassed', function(data) {
	      var currentAimedScore, passedUser, usernameToCallScore;
	      passedUser = data.passedUser;
	      usernameToCallScore = data.usernameToCallScore;
	      currentAimedScore = data.aimedScore;
	      if (passedUser === globalVariables.player1Username.text) {
	        globalVariables.player1StatusText.text = '不要';
	      } else if (passedUser === globalVariables.player2Username.text) {
	        globalVariables.player2StatusText.text = '不要';
	      } else if (passedUser === globalVariables.player3Username.text) {
	        globalVariables.player3StatusText.text = '不要';
	      }
	      if (usernameToCallScore === globalVariables.username) {
	        return actions.showCallScorePanel(game, currentAimedScore);
	      }
	    });
	    io.socket.on('makerSettled', function(data) {
	      var aimedScore, coveredCards, makerUsername;
	      aimedScore = data.aimedScore;
	      makerUsername = data.makerUsername;
	      globalVariables.textOfAimedScores.text = aimedScore + '分';
	      if (makerUsername === globalVariables.player1Username.text) {
	        globalVariables.player1IsMakerIcon.visible = true;
	      } else if (makerUsername === globalVariables.player2Username.text) {
	        globalVariables.player2IsMakerIcon.visible = true;
	      } else if (makerUsername === globalVariables.player3Username.text) {
	        globalVariables.player3IsMakerIcon.visible = true;
	      }
	      if (makerUsername === globalVariables.username) {
	        coveredCards = data.coveredCards;
	        globalVariables.cardsAtHand.values = globalVariables.cardsAtHand.values.concat(coveredCards);
	        globalVariables.cardsAtHand.values = toolbox.sortCards(globalVariables.cardsAtHand.values);
	        actions.displayCards(globalVariables.cardsAtHand.values);
	        globalVariables.surrenderButton.visible = true;
	        globalVariables.settleCoveredCardsButton.visible = true;
	        globalVariables.settleCoveredCardsButton.inputEnabled = false;
	        globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	        globalVariables.player1StatusText.text = '';
	        globalVariables.player2StatusText.text = '';
	        globalVariables.player3StatusText.text = '';
	      } else if (makerUsername === globalVariables.player1Username.text) {
	        globalVariables.meStatusText.text = '';
	        globalVariables.player1StatusText.text = '庄家埋底中...';
	        globalVariables.player2StatusText.text = '';
	        globalVariables.player3StatusText.text = '';
	      } else if (makerUsername === globalVariables.player2Username.text) {
	        globalVariables.meStatusText.text = '';
	        globalVariables.player1StatusText.text = '';
	        globalVariables.player2StatusText.text = '庄家埋底中...';
	        globalVariables.player3StatusText.text = '';
	      } else if (makerUsername === globalVariables.player3Username.text) {
	        globalVariables.meStatusText.text = '';
	        globalVariables.player1StatusText.text = '';
	        globalVariables.player2StatusText.text = '';
	        globalVariables.player3StatusText.text = '庄家埋底中...';
	      }
	      return globalVariables.gameStatus = constants.GAME_STATUS_SETTLING_COVERED_CARDS;
	    });
	    io.socket.on('finishedSettlingCoveredCards', function(data) {
	      var makerUsername;
	      makerUsername = data.maker;
	      if (makerUsername === globalVariables.player1Username.text) {
	        return globalVariables.player1StatusText.text = '庄家选主中...';
	      } else if (makerUsername === globalVariables.player2Username.text) {
	        return globalVariables.player2StatusText.text = '庄家选主中...';
	      } else if (makerUsername === globalVariables.player3Username.text) {
	        return globalVariables.player3StatusText.text = '庄家选主中...';
	      }
	    });
	    return io.socket.on('mainSuitChosen', function(data) {
	      var mainSuit;
	      mainSuit = data.mainSuit;
	      globalVariables.mainSuit = mainSuit;
	      globalVariables.iconOfMainSuit.frame = globalVariables.mainSuit;
	      globalVariables.meStatusText.text = '';
	      globalVariables.player1StatusText.text = '';
	      globalVariables.player2StatusText.text = '';
	      return globalVariables.player3StatusText.text = '';
	    });
	  };

	  module.exports = {
	    getRoomInfo: getRoomInfo,
	    socketEventHandler: socketEventHandler
	  };

	}).call(this);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var backgroundTapped, constants, displayCards, globalVariables, hideLeftPlayer, leaveRoom, lowerScore, pass, playSelectedCards, raiseScore, selectSuit, sendGetReadyMessage, setScore, settleCoveredCards, showCallScorePanel, showCoveredCards, showPlayedCardsForUser, showPlayer1Info, showPlayer2Info, showPlayer3Info, showSelectSuitPanel, suitTapEffect, surrender, tapDownOnSprite, tapUp, toggleCardSelection, toolbox;

	  constants = __webpack_require__(1);

	  globalVariables = __webpack_require__(2);

	  toolbox = __webpack_require__(3);

	  toggleCardSelection = function(sprite) {
	    if (!sprite.isSelected) {
	      sprite.y = sprite.y - constants.SELECTED_CARD_Y_OFFSET;
	    } else {
	      sprite.y = sprite.y + constants.SELECTED_CARD_Y_OFFSET;
	    }
	    return sprite.isSelected = !sprite.isSelected;
	  };

	  displayCards = function(array) {
	    var cardName, cardSprite, i, j, k, l, leftMargin, ref, ref1, ref2, results, spritesShouldBeRemoved;
	    leftMargin = (globalVariables.screenWidth - (Math.floor(globalVariables.scaledCardWidth / 4) * array.length + Math.floor(3 * globalVariables.scaledCardWidth / 4))) / 2;
	    spritesShouldBeRemoved = [];
	    if (globalVariables.cardsAtHand.children.length > 0) {
	      for (i = j = 0, ref = globalVariables.cardsAtHand.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        spritesShouldBeRemoved.push(globalVariables.cardsAtHand.children[i]);
	      }
	      for (i = k = 0, ref1 = spritesShouldBeRemoved.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	        globalVariables.cardsAtHand.remove(spritesShouldBeRemoved[i]);
	      }
	    }
	    results = [];
	    for (i = l = 0, ref2 = array.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	      cardName = toolbox.getCardName(array[i]);
	      cardSprite = globalVariables.cardsAtHand.create(leftMargin + i * Math.floor(globalVariables.scaledCardWidth / 4), globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.MARGIN, cardName);
	      cardSprite.scale.setTo(globalVariables.scaleWidthRatio, globalVariables.scaleHeightRatio);
	      cardSprite.isSelected = false;
	      cardSprite.inputEnabled = true;
	      cardSprite.index = i;
	      cardSprite.value = array[i];
	      cardSprite.input.useHandCursor = true;
	      cardSprite.events.onInputDown.add(tapDownOnSprite, this);
	      results.push(cardSprite.events.onInputUp.add(tapUp, this));
	    }
	    return results;
	  };

	  showPlayedCardsForUser = function(n, valuesOfPlayedCards) {
	    var cardsToRemove, i, j, k, l, playedCard, ref, ref1, ref2, results, startX, startY, userPlayedCards;
	    startX = null;
	    startY = null;
	    userPlayedCards = null;
	    switch (n) {
	      case 0:
	        startX = globalVariables.screenWidth / 2 - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 8;
	        startY = globalVariables.screenHeight - 2 * globalVariables.scaledCardHeight - 2 * constants.MARGIN;
	        userPlayedCards = globalVariables.currentUserPlayedCards;
	        break;
	      case 1:
	        startX = globalVariables.screenWidth - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 4 - constants.MARGIN;
	        startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2;
	        userPlayedCards = globalVariables.user1PlayedCards;
	        break;
	      case 2:
	        startX = globalVariables.screenWidth / 2 - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 8;
	        startY = constants.MARGIN;
	        userPlayedCards = globalVariables.user2PlayedCards;
	        break;
	      case 3:
	        startX = constants.MARGIN;
	        startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2;
	        userPlayedCards = globalVariables.user3PlayedCards;
	    }
	    cardsToRemove = [];
	    for (i = j = 0, ref = userPlayedCards.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      cardsToRemove.push(userPlayedCards.children[i]);
	    }
	    for (i = k = 0, ref1 = cardsToRemove.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      userPlayedCards.remove(cardsToRemove[i]);
	    }
	    results = [];
	    for (i = l = 0, ref2 = valuesOfPlayedCards.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	      playedCard = userPlayedCards.create(startX + i * globalVariables.scaledCardWidth / 4, startY, getCardName(valuesOfPlayedCards[i]));
	      playedCard.width = globalVariables.scaledCardWidth;
	      results.push(playedCard.height = globalVariables.scaledCardHeight);
	    }
	    return results;
	  };

	  sendGetReadyMessage = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    globalVariables.meStatusText.text = 'Ready';
	    return io.socket.post('/get_ready', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        globalVariables.prepareButton.visible = false;
	        return globalVariables.leaveButton.visible = false;
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  showCoveredCards = function() {
	    var cardName, coveredCard, coveredCardsStage, i, j, ref, stageHeight, stageWidth;
	    if (!globalVariables.isShowingCoveredCards) {
	      stageWidth = 11 * globalVariables.scaledCardWidth / 4 + 2 * constants.MARGIN;
	      stageHeight = globalVariables.scaledCardHeight + 2 * constants.MARGIN;
	      coveredCardsStage = globalVariables.coveredCards.create(globalVariables.screenWidth / 2 - stageWidth / 2, globalVariables.screenHeight / 2 - stageHeight / 2, 'stageBackground');
	      coveredCardsStage.alpha = 0.3;
	      coveredCardsStage.width = stageWidth;
	      coveredCardsStage.height = stageHeight;
	      for (i = j = 0, ref = globalVariables.coveredCards.indexes.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        cardName = toolbox.getCardName(globalVariables.coveredCards.indexes[i]);
	        coveredCard = globalVariables.coveredCards.create(coveredCardsStage.x + constants.MARGIN + i * globalVariables.scaledCardWidth / 4, coveredCardsStage.y + constants.MARGIN, cardName);
	        coveredCard.scale.setTo(globalVariables.scaleWidthRatio, globalVariables.scaleHeightRatio);
	      }
	      return globalVariables.isShowingCoveredCards = true;
	    }
	  };

	  tapUp = function(sprite, pointer) {
	    var i, j, k, l, m, ref, ref1, ref2, ref3, ref4, ref5, selectedCardValues;
	    if (pointer.x >= globalVariables.cardsAtHand.children[0].x && pointer.x <= (globalVariables.cardsAtHand.children[globalVariables.cardsAtHand.children.length - 1].x + globalVariables.cardsAtHand.children[globalVariables.cardsAtHand.children.length - 1].width) && pointer.y >= globalVariables.cardsAtHand.children[0].y && pointer.y <= (globalVariables.cardsAtHand.children[0].y + globalVariables.cardsAtHand.children[0].height)) {
	      globalVariables.endSwipeCardIndex = -1;
	      for (i = j = 0, ref = globalVariables.cardsAtHand.children.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        if (pointer.x >= globalVariables.cardsAtHand.children[i].x && pointer.x <= globalVariables.cardsAtHand.children[i + 1].x) {
	          globalVariables.endSwipeCardIndex = i;
	          break;
	        }
	      }
	      if (globalVariables.endSwipeCardIndex === -1) {
	        globalVariables.endSwipeCardIndex = globalVariables.cardsAtHand.children.length - 1;
	      }
	      if (globalVariables.startSwipeCardIndex <= globalVariables.endSwipeCardIndex) {
	        for (i = k = ref1 = globalVariables.startSwipeCardIndex, ref2 = globalVariables.endSwipeCardIndex + 1; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
	          toggleCardSelection(globalVariables.cardsAtHand.children[i]);
	        }
	      } else {
	        for (i = l = ref3 = globalVariables.endSwipeCardIndex, ref4 = globalVariables.startSwipeCardIndex + 1; ref3 <= ref4 ? l < ref4 : l > ref4; i = ref3 <= ref4 ? ++l : --l) {
	          toggleCardSelection(globalVariables.cardsAtHand.children[i]);
	        }
	      }
	      selectedCardValues = [];
	      for (i = m = 0, ref5 = globalVariables.cardsAtHand.children.length; 0 <= ref5 ? m < ref5 : m > ref5; i = 0 <= ref5 ? ++m : --m) {
	        if (globalVariables.cardsAtHand.children[i].isSelected) {
	          selectedCardValues.push(globalVariables.cardsAtHand.children[i].value);
	        }
	      }
	      if (globalVariables.gameStatus === constants.GAME_STATUS_SETTLING_COVERED_CARDS) {
	        if (selectedCardValues.length === 8) {
	          globalVariables.settleCoveredCardsButton.inputEnabled = true;
	          return globalVariables.settleCoveredCardsButton.setFrames(1, 0, 1);
	        } else {
	          globalVariables.settleCoveredCardsButton.inputEnabled = false;
	          return globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	        }
	      } else if (globalVariables.gameStatus === constants.GAME_STATUS_PLAYING) {
	        if (toolbox.validateSelectedCardsForPlay(selectedCardValues)) {
	          globalVariables.playCardsButton.inputEnabled = true;
	          return globalVariables.playCardsButton.setFrames(1, 0, 1);
	        } else {
	          globalVariables.playCardsButton.inputEnabled = false;
	          return globalVariables.playCardsButton.setFrames(2, 2, 2);
	        }
	      }
	    }
	  };

	  tapDownOnSprite = function(sprite, pointer) {
	    return globalVariables.startSwipeCardIndex = sprite.index;
	  };

	  hideLeftPlayer = function(username) {
	    if (globalVariables.player1Username) {
	      if (username === globalVariables.player1Username.text) {
	        globalVariables.user1Avatar.destroy();
	        globalVariables.player1Username.destroy();
	        globalVariables.player1IsMakerIcon.destroy();
	        globalVariables.player1StatusText.destroy();
	      }
	    }
	    if (globalVariables.player2Username) {
	      if (username === globalVariables.player2Username.text) {
	        globalVariables.user2Avatar.destroy();
	        globalVariables.player2Username.destroy();
	        globalVariables.player2IsMakerIcon.destroy();
	        globalVariables.player2StatusText.destroy();
	      }
	    }
	    if (globalVariables.player3Username) {
	      if (username === globalVariables.player3Username.text) {
	        globalVariables.user3Avatar.destroy();
	        globalVariables.player3Username.destroy();
	        globalVariables.player3IsMakerIcon.destroy();
	        return globalVariables.player3StatusText.destroy();
	      }
	    }
	  };

	  backgroundTapped = function() {
	    var i, j, k, l, ref, ref1, spritesShouldBeRemoved;
	    if (globalVariables.isShowingCoveredCards) {
	      spritesShouldBeRemoved = [];
	      for (i = j = 1; j < 10; i = ++j) {
	        spritesShouldBeRemoved.push(globalVariables.coveredCards.children[i]);
	      }
	      for (i = k = 0, ref = spritesShouldBeRemoved.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
	        globalVariables.coveredCards.remove(spritesShouldBeRemoved[i]);
	      }
	      globalVariables.isShowingCoveredCards = false;
	    } else {
	      for (i = l = 0, ref1 = globalVariables.cardsAtHand.children.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
	        if (globalVariables.cardsAtHand.children[i].isSelected) {
	          toggleCardSelection(globalVariables.cardsAtHand.children[i]);
	        }
	      }
	    }
	    if (globalVariables.gameStatus === constants.GAME_STATUS_SETTLING_COVERED_CARDS) {
	      globalVariables.settleCoveredCardsButton.inputEnabled = false;
	      return globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	    }
	  };

	  playSelectedCards = function() {
	    var i, index, j, k, l, leftMargin, numOfCardsLeft, ref, ref1, ref2, selectedCards, valuesOfCurrentUserPlayedCards;
	    selectedCards = [];
	    valuesOfCurrentUserPlayedCards = [];
	    for (i = j = 0, ref = globalVariables.cardsAtHand.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (globalVariables.cardsAtHand.children[i].isSelected) {
	        selectedCards.push(globalVariables.cardsAtHand.children[i]);
	        valuesOfCurrentUserPlayedCards.push(globalVariables.cardsAtHand.children[i].value);
	      }
	    }
	    if (selectedCards.length === 0) {
	      return;
	    }
	    for (i = k = 0, ref1 = selectedCards.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      globalVariables.cardsAtHand.remove(selectedCards[i]);
	      index = globalVariables.cardsAtHand.values.indexOf(selectedCards[i].value);
	      globalVariables.cardsAtHand.values.splice(index, 1);
	    }
	    numOfCardsLeft = globalVariables.cardsAtHand.children.length;
	    leftMargin = (globalVariables.screenWidth - (Math.floor(globalVariables.scaledCardWidth / 4) * numOfCardsLeft + Math.floor(3 * globalVariables.scaledCardWidth / 4))) / 2;
	    for (i = l = 0, ref2 = globalVariables.cardsAtHand.children.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	      globalVariables.cardsAtHand.children[i].x = leftMargin + i * Math.floor(globalVariables.scaledCardWidth / 4);
	      globalVariables.cardsAtHand.children[i].index = i;
	    }
	    return showPlayedCardsForUser(0, valuesOfCurrentUserPlayedCards);
	  };

	  showPlayer1Info = function(game, username) {
	    globalVariables.user1Avatar = game.add.sprite(globalVariables.screenWidth - constants.AVATAR_SIZE - constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'avatar');
	    globalVariables.user1Avatar.width /= 2;
	    globalVariables.user1Avatar.height /= 2;
	    globalVariables.player1IsMakerIcon = game.add.sprite(globalVariables.screenWidth - constants.AVATAR_SIZE - constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'makerIcon');
	    globalVariables.player1IsMakerIcon.width = constants.MAKER_ICON_SIZE;
	    globalVariables.player1IsMakerIcon.height = constants.MAKER_ICON_SIZE;
	    globalVariables.player1IsMakerIcon.visible = false;
	    globalVariables.player1Username = game.add.text(globalVariables.screenWidth - constants.AVATAR_SIZE - constants.MARGIN, game.world.centerY + constants.AVATAR_SIZE / 2 + constants.MARGIN, username, constants.TEXT_STYLE);
	    return globalVariables.player1Username.setTextBounds(0, 0, constants.AVATAR_SIZE, 25);
	  };

	  showPlayer2Info = function(game, username) {
	    globalVariables.user2Avatar = game.add.sprite(game.world.centerX - constants.AVATAR_SIZE / 2, constants.MARGIN, 'avatar');
	    globalVariables.user2Avatar.width /= 2;
	    globalVariables.user2Avatar.height /= 2;
	    globalVariables.player2IsMakerIcon = game.add.sprite(game.world.centerX - constants.AVATAR_SIZE / 2, constants.MARGIN, 'makerIcon');
	    globalVariables.player2IsMakerIcon.width = constants.MAKER_ICON_SIZE;
	    globalVariables.player2IsMakerIcon.height = constants.MAKER_ICON_SIZE;
	    globalVariables.player2IsMakerIcon.visible = false;
	    globalVariables.player2Username = game.add.text(game.world.centerX - constants.AVATAR_SIZE / 2, constants.AVATAR_SIZE + 2 * constants.MARGIN, username, constants.TEXT_STYLE);
	    return globalVariables.player2Username.setTextBounds(0, 0, constants.AVATAR_SIZE, 25);
	  };

	  showPlayer3Info = function(game, username) {
	    globalVariables.user3Avatar = game.add.sprite(constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'avatar');
	    globalVariables.user3Avatar.width /= 2;
	    globalVariables.user3Avatar.height /= 2;
	    globalVariables.player3IsMakerIcon = game.add.sprite(constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'makerIcon');
	    globalVariables.player3IsMakerIcon.width = constants.MAKER_ICON_SIZE;
	    globalVariables.player3IsMakerIcon.height = constants.MAKER_ICON_SIZE;
	    globalVariables.player3IsMakerIcon.visible = false;
	    globalVariables.player3Username = game.add.text(constants.MARGIN, game.world.centerY + constants.AVATAR_SIZE / 2 + constants.MARGIN, username, constants.TEXT_STYLE);
	    return globalVariables.player3Username.setTextBounds(0, 0, constants.AVATAR_SIZE, 25);
	  };

	  raiseScore = function() {
	    var aimedScores, currentSetScores;
	    aimedScores = parseInt(globalVariables.textOfAimedScores.text);
	    currentSetScores = parseInt(globalVariables.callScoreStage.children[2].text);
	    if (currentSetScores < (aimedScores - 5)) {
	      currentSetScores += 5;
	      return globalVariables.callScoreStage.children[2].text = '' + currentSetScores;
	    }
	  };

	  showCallScorePanel = function(game, currentScore) {
	    var background, currentScoreText, lowerScoreButton, passButton, raiseScoreButton, setScoreButton, stageHeight, stageWidth;
	    globalVariables.callScoreStage = game.add.group();
	    stageWidth = 11 * globalVariables.scaledCardWidth / 4 + 2 * constants.MARGIN;
	    stageHeight = globalVariables.scaledCardHeight + 2 * constants.MARGIN;
	    background = globalVariables.callScoreStage.create(globalVariables.screenWidth / 2 - stageWidth / 2, globalVariables.screenHeight / 2 - stageHeight / 2, 'stageBackground');
	    background.alpha = 0.3;
	    background.width = stageWidth;
	    background.height = stageHeight;
	    raiseScoreButton = game.add.button(game.world.centerX - constants.ROUND_BUTTON_SIZE / 2 - constants.ROUND_BUTTON_SIZE - constants.MARGIN, game.world.centerY - stageHeight / 2 + constants.MARGIN, 'raiseScoreButton', raiseScore, this, 1, 0, 1, 0);
	    globalVariables.callScoreStage.add(raiseScoreButton);
	    currentScoreText = game.add.text(game.world.centerX - constants.ROUND_BUTTON_SIZE / 2, game.world.centerY - stageHeight / 2 + constants.MARGIN, '' + currentScore - 5, constants.LARGE_TEXT_STYLE);
	    currentScoreText.setTextBounds(0, 0, constants.ROUND_BUTTON_SIZE, constants.ROUND_BUTTON_SIZE);
	    globalVariables.callScoreStage.add(currentScoreText);
	    lowerScoreButton = game.add.button(game.world.centerX + constants.ROUND_BUTTON_SIZE / 2 + constants.MARGIN, game.world.centerY - stageHeight / 2 + constants.MARGIN, 'lowerScoreButton', lowerScore, this, 1, 0, 1);
	    globalVariables.callScoreStage.add(lowerScoreButton);
	    setScoreButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH - constants.MARGIN / 2, game.world.centerY + constants.ROUND_BUTTON_SIZE / 2, 'setScoreButton', setScore, this, 1, 0, 1);
	    globalVariables.callScoreStage.add(setScoreButton);
	    passButton = game.add.button(game.world.centerX + constants.MARGIN / 2, game.world.centerY + constants.ROUND_BUTTON_SIZE / 2, 'passButton', pass, this, 1, 0, 1, 0);
	    return globalVariables.callScoreStage.add(passButton);
	  };

	  setScore = function() {
	    var aimedScore, csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    aimedScore = parseInt(globalVariables.callScoreStage.children[2].text);
	    return io.socket.post('/set_score', {
	      score: aimedScore,
	      roomName: globalVariables.roomName,
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        globalVariables.callScoreStage.destroy(true, false);
	        return globalVariables.meStatusText.text = '' + aimedScore;
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  lowerScore = function() {
	    var aimedScores, currentSetScores;
	    aimedScores = parseInt(globalVariables.textOfAimedScores.text);
	    currentSetScores = parseInt(globalVariables.callScoreStage.children[2].text);
	    if (currentSetScores > 5) {
	      currentSetScores -= 5;
	      return globalVariables.callScoreStage.children[2].text = '' + currentSetScores;
	    }
	  };

	  pass = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    globalVariables.meStatusText.text = '不要';
	    return io.socket.post('/pass', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken,
	      username: globalVariables.username,
	      roomName: globalVariables.roomName
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        return globalVariables.callScoreStage.destroy(true, false);
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  surrender = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    globalVariables.prepareButton.visible = true;
	    globalVariables.leaveButton.visible = true;
	    globalVariables.meStatusText.text = '你输了';
	    globalVariables.surrenderButton.visible = false;
	    return globalVariables.settleCoveredCardsButton.visible = false;
	  };

	  settleCoveredCards = function() {
	    var coveredCardsIcon, csrfToken, i, index, j, k, ref, ref1, valuesOfSelectedCoveredCards;
	    valuesOfSelectedCoveredCards = [];
	    for (i = j = 0, ref = globalVariables.cardsAtHand.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (globalVariables.cardsAtHand.children[i].isSelected) {
	        valuesOfSelectedCoveredCards.push(globalVariables.cardsAtHand.children[i].value);
	      }
	    }
	    if (valuesOfSelectedCoveredCards.length !== 8) {
	      return;
	    }
	    for (i = k = 0, ref1 = valuesOfSelectedCoveredCards.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      index = globalVariables.cardsAtHand.values.indexOf(valuesOfSelectedCoveredCards[i]);
	      globalVariables.cardsAtHand.values.splice(index, 1);
	    }
	    displayCards(globalVariables.cardsAtHand.values);
	    coveredCardsIcon = globalVariables.coveredCards.create(constants.MARGIN, constants.MARGIN, 'back');
	    coveredCardsIcon.scale.setTo(globalVariables.scaleWidthRatio, globalVariables.scaleHeightRatio);
	    coveredCardsIcon.inputEnabled = true;
	    globalVariables.coveredCards.indexes = valuesOfSelectedCoveredCards;
	    coveredCardsIcon.events.onInputDown.add(showCoveredCards, this);
	    globalVariables.settleCoveredCardsButton.visible = false;
	    globalVariables.settleCoveredCardsButton.inputEnabled = false;
	    globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/settleCoveredCards', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken,
	      roomName: globalVariables.roomName,
	      coveredCards: globalVariables.coveredCards.indexes,
	      maker: globalVariables.username,
	      cardsAtHand: globalVariables.cardsAtHand.values
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        return showSelectSuitPanel();
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  showSelectSuitPanel = function() {
	    var background, i, j, rectangle, stageHeight, stageWidth, suitIcon, suitIconNames;
	    globalVariables.gameStatus = constants.GAME_STATUS_DECIDING_SUIT;
	    globalVariables.selectSuitButton.visible = true;
	    globalVariables.selectSuitButton.inputEnabled = false;
	    globalVariables.selectSuitButton.setFrames(2, 2, 2);
	    stageWidth = 4 * constants.SUIT_ICON_SIZE + 8 * constants.MARGIN;
	    stageHeight = 2 * constants.MARGIN + constants.SUIT_ICON_SIZE;
	    background = globalVariables.selectSuitStage.create(globalVariables.screenWidth / 2 - stageWidth / 2, globalVariables.screenHeight / 2 - stageHeight / 2, 'stageBackground');
	    background.alpha = 0.3;
	    background.width = stageWidth;
	    background.height = stageHeight;
	    globalVariables.selectSuitStage.add(background);
	    suitIconNames = ['spade', 'heart', 'club', 'diamond'];
	    suitIcon = null;
	    for (i = j = 0; j < 4; i = ++j) {
	      suitIcon = globalVariables.selectSuitStage.create(background.x + (1 + 2 * i) * constants.MARGIN, background.y + constants.MARGIN, suitIconNames[i]);
	      suitIcon.width = constants.SUIT_ICON_SIZE;
	      suitIcon.height = constants.SUIT_ICON_SIZE;
	      suitIcon.inputEnabled = true;
	      suitIcon.input.useHandCursor = true;
	      suitIcon.events.onInputDown.add(function() {
	        return suitTapEffect(i + 1);
	      });
	      this;
	      globalVariables.selectSuitStage.add(suitIcon);
	    }
	    rectangle = globalVariables.selectSuitStage.create(spadeIcon.x, spadeIcon.y, 'rectangle');
	    rectangle.width = constants.SUIT_ICON_SIZE + 10;
	    rectangle.height = constants.SUIT_ICON_SIZE + 10;
	    rectangle.visible = false;
	    return globalVariables.selectSuitStage.add(rectangle);
	  };

	  selectSuit = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/chooseMainSuit', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken,
	      roomName: globalVariables.roomName,
	      maker: globalVariables.username,
	      mainSuit: globalVariables.mainSuit
	    }, function(resData, jwres) {
	      var i, j, k, ref, ref1, spritesShouldBeRemoved;
	      if (jwres.statusCode === 200) {
	        globalVariables.surrenderButton.visible = false;
	        globalVariables.selectSuitButton.visible = false;
	        spritesShouldBeRemoved = [];
	        for (i = j = 0, ref = globalVariables.selectSuitStage.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	          spritesShouldBeRemoved.push(globalVariables.selectSuitStage.children[i]);
	        }
	        for (i = k = 0, ref1 = spritesShouldBeRemoved.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	          globalVariables.selectSuitStage.remove(spritesShouldBeRemoved[i]);
	        }
	        globalVariables.iconOfMainSuit.frame = globalVariables.mainSuit;
	        globalVariables.playCardsButton.visible = true;
	        globalVariables.playCardsButton.inputEnabled = false;
	        globalVariables.playCardsButton.setFrames(2, 2, 2);
	        return globalVariables.gameStatus = constants.GAME_STATUS_PLAYING;
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  suitTapEffect = function(suitIndex) {
	    var rectangle, suitIcon;
	    globalVariables.mainSuit = suitIndex;
	    rectangle = globalVariables.selectSuitStage.children[globalVariables.selectSuitStage.children.length - 1];
	    suitIcon = globalVariables.selectSuitStage.children[suitIndex];
	    rectangle.x = suitIcon.x - 5;
	    rectangle.y = suitIcon.y - 5;
	    rectangle.visible = true;
	    globalVariables.selectSuitButton.inputEnabled = true;
	    return globalVariables.selectSuitButton.setFrames(1, 0, 1);
	  };

	  leaveRoom = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/leave_room', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        return window.location.href = '/';
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  module.exports = {
	    toggleCardSelection: toggleCardSelection,
	    displayCards: displayCards,
	    showCoveredCards: showCoveredCards,
	    showPlayedCardsForUser: showPlayedCardsForUser,
	    tapUp: tapUp,
	    tapDownOnSprite: tapDownOnSprite,
	    backgroundTapped: backgroundTapped,
	    playSelectedCards: playSelectedCards,
	    showPlayer1Info: showPlayer1Info,
	    showPlayer2Info: showPlayer2Info,
	    showPlayer3Info: showPlayer3Info,
	    hideLeftPlayer: hideLeftPlayer,
	    showCallScorePanel: showCallScorePanel,
	    raiseScore: raiseScore,
	    lowerScore: lowerScore,
	    pass: pass,
	    surrender: surrender,
	    settleCoveredCards: settleCoveredCards,
	    showSelectSuitPanel: showSelectSuitPanel,
	    setScore: setScore,
	    selectSuit: selectSuit,
	    leaveRoom: leaveRoom,
	    sendGetReadyMessage: sendGetReadyMessage
	  };

	}).call(this);


/***/ }
/******/ ]);