/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var actions, communications, constants, create, game, globalVariables, preload, toolbox, update;

	  constants = __webpack_require__(1);

	  globalVariables = __webpack_require__(2);

	  toolbox = __webpack_require__(3);

	  communications = __webpack_require__(4);

	  actions = __webpack_require__(5);

	  preload = function() {
	    game.load.image('avatar', 'images/defaultAvatar.jpg');
	    game.load.image('background', 'images/background.png');
	    game.load.image('stageBackground', 'images/stageBackground.png');
	    game.load.spritesheet('playButton', 'images/playButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('prepareButton', 'images/prepareButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('leaveButton', 'images/leaveButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('raiseScoreButton', 'images/raiseScoreButton.png', constants.ROUND_BUTTON_SIZE, constants.ROUND_BUTTON_SIZE);
	    game.load.spritesheet('lowerScoreButton', 'images/lowerScoreButton.png', constants.ROUND_BUTTON_SIZE, constants.ROUND_BUTTON_SIZE);
	    game.load.spritesheet('setScoreButton', 'images/setScoreButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('passButton', 'images/passButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('surrenderButton', 'images/surrenderButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('selectSuitButton', 'images/selectSuitButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('settleCoveredCardsButton', 'images/settleCoveredCardsButton.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('historical', 'images/historical.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('lastRound', 'images/lastRound.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.spritesheet('nextRound', 'images/nextRound.png', constants.BUTTON_WIDTH, constants.BUTTON_HEIGHT);
	    game.load.image('back', 'images/back.png');
	    game.load.image('bigJoker', 'images/bigJoker.png');
	    game.load.image('smallJoker', 'images/smallJoker.png');
	    game.load.image('sevenOfSpades', 'images/sevenOfSpades.png');
	    game.load.image('sevenOfHearts', 'images/sevenOfHearts.png');
	    game.load.image('sevenOfClubs', 'images/sevenOfClubs.png');
	    game.load.image('sevenOfDiamonds', 'images/sevenOfDiamonds.png');
	    game.load.image('twoOfSpades', 'images/twoOfSpades.png');
	    game.load.image('twoOfHearts', 'images/twoOfHearts.png');
	    game.load.image('twoOfClubs', 'images/twoOfClubs.png');
	    game.load.image('twoOfDiamonds', 'images/twoOfDiamonds.png');
	    game.load.image('aceOfSpades', 'images/aceOfSpades.png');
	    game.load.image('kingOfSpades', 'images/kingOfSpades.png');
	    game.load.image('queenOfSpades', 'images/queenOfSpades.png');
	    game.load.image('jackOfSpades', 'images/jackOfSpades.png');
	    game.load.image('tenOfSpades', 'images/tenOfSpades.png');
	    game.load.image('nineOfSpades', 'images/nineOfSpades.png');
	    game.load.image('eightOfSpades', 'images/eightOfSpades.png');
	    game.load.image('sixOfSpades', 'images/sixOfSpades.png');
	    game.load.image('fiveOfSpades', 'images/fiveOfSpades.png');
	    game.load.image('aceOfHearts', 'images/aceOfHearts.png');
	    game.load.image('kingOfHearts', 'images/kingOfHearts.png');
	    game.load.image('queenOfHearts', 'images/queenOfHearts.png');
	    game.load.image('jackOfHearts', 'images/jackOfHearts.png');
	    game.load.image('tenOfHearts', 'images/tenOfHearts.png');
	    game.load.image('nineOfHearts', 'images/nineOfHearts.png');
	    game.load.image('eightOfHearts', 'images/eightOfHearts.png');
	    game.load.image('sixOfHearts', 'images/sixOfHearts.png');
	    game.load.image('fiveOfHearts', 'images/fiveOfHearts.png');
	    game.load.image('aceOfClubs', 'images/aceOfClubs.png');
	    game.load.image('kingOfClubs', 'images/kingOfClubs.png');
	    game.load.image('queenOfClubs', 'images/queenOfClubs.png');
	    game.load.image('jackOfClubs', 'images/jackOfClubs.png');
	    game.load.image('tenOfClubs', 'images/tenOfClubs.png');
	    game.load.image('nineOfClubs', 'images/nineOfClubs.png');
	    game.load.image('eightOfClubs', 'images/eightOfClubs.png');
	    game.load.image('sixOfClubs', 'images/sixOfClubs.png');
	    game.load.image('fiveOfClubs', 'images/fiveOfClubs.png');
	    game.load.image('aceOfDiamonds', 'images/aceOfDiamonds.png');
	    game.load.image('kingOfDiamonds', 'images/kingOfDiamonds.png');
	    game.load.image('queenOfDiamonds', 'images/queenOfDiamonds.png');
	    game.load.image('jackOfDiamonds', 'images/jackOfDiamonds.png');
	    game.load.image('tenOfDiamonds', 'images/tenOfDiamonds.png');
	    game.load.image('nineOfDiamonds', 'images/nineOfDiamonds.png');
	    game.load.image('eightOfDiamonds', 'images/eightOfDiamonds.png');
	    game.load.image('sixOfDiamonds', 'images/sixOfDiamonds.png');
	    game.load.image('fiveOfDiamonds', 'images/fiveOfDiamonds.png');
	    game.load.image('spade', 'images/spade.png');
	    game.load.image('heart', 'images/heart.png');
	    game.load.image('club', 'images/club.png');
	    game.load.image('diamond', 'images/diamond.png');
	    game.load.spritesheet('suites', 'images/suites.png', constants.MAIN_SUIT_ICON_SIZE, constants.MAIN_SUIT_ICON_SIZE);
	    game.load.image('rectangle', 'images/rectangle.png');
	    game.load.image('makerIcon', 'images/makerIcon.png');
	    return game.load.image('big', 'images/big.png');
	  };

	  create = function() {
	    var titleOfAimedScores, titleOfChipsWon, titleOfCurrentScores, titleOfMainSuit, titleOfRoomName;
	    globalVariables.background = game.add.sprite(0, 0, 'background');
	    globalVariables.background.inputEnabled = true;
	    globalVariables.background.events.onInputDown.add(actions.backgroundTapped, this);
	    globalVariables.background.scale.setTo(globalVariables.screenWidth / constants.BACKGROUND_IMAGE_SIZE, globalVariables.screenHeight / constants.BACKGROUND_IMAGE_SIZE);
	    globalVariables.scaledCardWidth = Math.floor((globalVariables.screenWidth - constants.MARGIN * 2) / 8);
	    globalVariables.scaleWidthRatio = globalVariables.scaledCardWidth / constants.CARD_WIDTH;
	    globalVariables.scaledCardHeight = globalVariables.screenHeight / 5;
	    globalVariables.scaleHeightRatio = globalVariables.scaledCardHeight / constants.CARD_HEIGHT;
	    globalVariables.scaledCardWidth = constants.CARD_WIDTH * globalVariables.scaleWidthRatio;
	    globalVariables.scaledCardHeight = constants.CARD_HEIGHT * globalVariables.scaleHeightRatio;
	    globalVariables.cardsAtHand = game.add.group();
	    globalVariables.coveredCards = game.add.group();
	    globalVariables.selectSuitStage = game.add.group();
	    globalVariables.playCardsButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'playButton', actions.playSelectedCards, this, 1, 0, 1);
	    globalVariables.playCardsButton.inputEnabled = false;
	    globalVariables.playCardsButton.visible = false;
	    globalVariables.historicalButton = game.add.button(globalVariables.screenWidth - 2 * constants.MARGIN - constants.BUTTON_WIDTH - constants.AVATAR_SIZE, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'historical', function() {
	      return actions.showHistoricallyPlayedCards(game);
	    }, this, 1, 0, 1);
	    globalVariables.historicalButton.inputEnabled = false;
	    globalVariables.historicalButton.visible = false;
	    globalVariables.prepareButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH - constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'prepareButton', actions.sendGetReadyMessage, this, 1, 0, 1);
	    globalVariables.leaveButton = game.add.button(game.world.centerX + constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'leaveButton', actions.leaveRoom, this, 1, 0, 1);
	    globalVariables.surrenderButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH - constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'surrenderButton', actions.surrender, this, 1, 0, 1);
	    globalVariables.surrenderButton.visible = false;
	    globalVariables.settleCoveredCardsButton = game.add.button(game.world.centerX + constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'settleCoveredCardsButton', actions.settleCoveredCards, this, 1, 0, 1);
	    globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	    globalVariables.settleCoveredCardsButton.inputEnabled = false;
	    globalVariables.settleCoveredCardsButton.visible = false;
	    globalVariables.selectSuitButton = game.add.button(game.world.centerX + constants.MARGIN / 2, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'selectSuitButton', actions.selectSuit, this, 2, 2, 2);
	    globalVariables.selectSuitButton.inputEnabled = false;
	    globalVariables.selectSuitButton.visible = false;
	    globalVariables.currentUserPlayedCards = game.add.group();
	    globalVariables.user1PlayedCards = game.add.group();
	    globalVariables.user2PlayedCards = game.add.group();
	    globalVariables.user3PlayedCards = game.add.group();
	    titleOfMainSuit = game.add.text(globalVariables.screenWidth - 5 * constants.UPPER_RIGHT_TEXT_WIDTH, constants.MARGIN, '主牌', constants.TEXT_STYLE);
	    titleOfMainSuit.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.iconOfMainSuit = game.add.sprite(globalVariables.screenWidth - 5 * constants.UPPER_RIGHT_TEXT_WIDTH + constants.MARGIN, 2 * constants.MARGIN + constants.UPPER_RIGHT_TEXT_HEIGHT, 'suites');
	    globalVariables.iconOfMainSuit.scale.setTo(constants.UPPER_RIGHT_TEXT_HEIGHT / constants.MAIN_SUIT_ICON_SIZE, constants.UPPER_RIGHT_TEXT_HEIGHT / constants.MAIN_SUIT_ICON_SIZE);
	    globalVariables.iconOfMainSuit.frame = 0;
	    titleOfAimedScores = game.add.text(globalVariables.screenWidth - 4 * constants.UPPER_RIGHT_TEXT_WIDTH, constants.MARGIN, '叫分', constants.TEXT_STYLE);
	    titleOfAimedScores.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.textOfAimedScores = game.add.text(globalVariables.screenWidth - 4 * constants.UPPER_RIGHT_TEXT_WIDTH, 2 * constants.MARGIN + constants.UPPER_RIGHT_TEXT_HEIGHT, '80', constants.TEXT_STYLE);
	    globalVariables.textOfAimedScores.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    titleOfCurrentScores = game.add.text(globalVariables.screenWidth - 3 * constants.UPPER_RIGHT_TEXT_WIDTH, constants.MARGIN, '得分', constants.TEXT_STYLE);
	    titleOfCurrentScores.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.textOfCurrentScores = game.add.text(globalVariables.screenWidth - 3 * constants.UPPER_RIGHT_TEXT_WIDTH, 2 * constants.MARGIN + constants.UPPER_RIGHT_TEXT_HEIGHT, '0', constants.TEXT_STYLE);
	    globalVariables.textOfCurrentScores.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.textOfEarnedScores = game.add.text(globalVariables.screenWidth - 3 * constants.UPPER_RIGHT_TEXT_WIDTH, 3 * constants.MARGIN + 2 * constants.UPPER_RIGHT_TEXT_HEIGHT, '+ 0', constants.ALERT_TEXT_STYLE);
	    globalVariables.textOfEarnedScores.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.textOfEarnedScores.alpha = 0;
	    titleOfChipsWon = game.add.text(globalVariables.screenWidth - 2 * constants.UPPER_RIGHT_TEXT_WIDTH, constants.MARGIN, '输赢', constants.TEXT_STYLE);
	    titleOfChipsWon.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.textOfChipsWon = game.add.text(globalVariables.screenWidth - 2 * constants.UPPER_RIGHT_TEXT_WIDTH, 2 * constants.MARGIN + constants.UPPER_RIGHT_TEXT_HEIGHT, '0', constants.TEXT_STYLE);
	    globalVariables.textOfChipsWon.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    titleOfRoomName = game.add.text(globalVariables.screenWidth - 70, constants.MARGIN, '房间', constants.TEXT_STYLE);
	    titleOfRoomName.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.textOfRoomName = game.add.text(globalVariables.screenWidth - constants.UPPER_RIGHT_TEXT_WIDTH, 2 * constants.MARGIN + constants.UPPER_RIGHT_TEXT_HEIGHT, '', constants.TEXT_STYLE);
	    globalVariables.textOfRoomName.setTextBounds(0, 0, constants.UPPER_RIGHT_TEXT_WIDTH, constants.UPPER_RIGHT_TEXT_HEIGHT);
	    globalVariables.meStatusText = game.add.text(game.world.centerX - constants.MARGIN, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 3 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET - constants.BUTTON_HEIGHT, '', constants.TEXT_STYLE);
	    globalVariables.player1StatusText = game.add.text(globalVariables.screenWidth - 2 * constants.AVATAR_SIZE - 3 * constants.MARGIN, game.world.centerY, '', constants.TEXT_STYLE);
	    globalVariables.player2StatusText = game.add.text(game.world.centerX - constants.MARGIN, constants.AVATAR_SIZE + 4 * constants.MARGIN, '', constants.TEXT_STYLE);
	    globalVariables.player3StatusText = game.add.text(constants.AVATAR_SIZE + 2 * constants.MARGIN, game.world.centerY, '', constants.TEXT_STYLE);
	    globalVariables.meHistoricalPlayedCardGroupForOneRound = game.add.group();
	    globalVariables.player1HistoricalPlayedCardGroupForOneRound = game.add.group();
	    globalVariables.player2HistoricalPlayedCardGroupForOneRound = game.add.group();
	    globalVariables.player3HistoricalPlayedCardGroupForOneRound = game.add.group();
	    communications.getRoomInfo(game);
	    return communications.socketEventHandler(game);
	  };

	  update = function() {};

	  game = new Phaser.Game(globalVariables.screenWidth, globalVariables.screenHeight, Phaser.AUTO, '', {
	    preload: preload,
	    create: create,
	    update: update
	  });

	}).call(this);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  module.exports = {
	    BACKGROUND_IMAGE_SIZE: 200,
	    MAKER_ICON_SIZE: 30,
	    CARD_WIDTH: 180,
	    CARD_HEIGHT: 251,
	    SELECTED_CARD_Y_OFFSET: 40,
	    BUTTON_WIDTH: 150,
	    BUTTON_HEIGHT: 40,
	    MAIN_SUIT_ICON_SIZE: 100,
	    ROUND_BUTTON_SIZE: 70,
	    AVATAR_SIZE: 75,
	    INITIAL_NUM_CARDS_AT_HAND: 21,
	    NUM_OF_COVERED_CARDS: 8,
	    MARGIN: 20,
	    WHITE_COLOR: '#ffffff',
	    LARGE_TEXT_STYLE: {
	      font: "bold 32px Arial",
	      fill: "#fff",
	      boundsAlignH: "center",
	      boundsAlignV: "middle"
	    },
	    TEXT_STYLE: {
	      font: "bold 20px Arial",
	      fill: "#fff",
	      boundsAlignH: "center",
	      boundsAlignV: "middle"
	    },
	    ALERT_TEXT_STYLE: {
	      font: "bold 20px Arial",
	      fill: "#fa6161",
	      boundsAlignH: "center",
	      boundsAlignV: "middle"
	    },
	    RED_TEXT_STYLE: {
	      font: "bold 20px Arial",
	      fill: "#fa6161"
	    },
	    UPPER_RIGHT_TEXT_WIDTH: 70,
	    UPPER_RIGHT_TEXT_HEIGHT: 30,
	    GAME_STATUS_NOT_STARTED: 0,
	    GAME_STATUS_SETTLING_COVERED_CARDS: 1,
	    GAME_STATUS_DECIDING_SUIT: 2,
	    GAME_STATUS_PLAYING: 3,
	    SUIT_ICON_SIZE: 50,
	    INDEX_SUIT_MAIN: 0,
	    INDEX_SUIT_SPADE: 1,
	    INDEX_SUIT_HEART: 2,
	    INDEX_SUIT_CLUB: 3,
	    INDEX_SUIT_DIAMOND: 4,
	    START_VALUE_FOR_MAIN: 1,
	    END_VALUE_FOR_MAIN: 10,
	    START_VALUE_FOR_SPADE: 11,
	    END_VALUE_FOR_SPADE: 19,
	    START_VALUE_FOR_HEART: 20,
	    END_VALUE_FOR_HEART: 28,
	    START_VALUE_FOR_CLUB: 29,
	    END_VALUE_FOR_CLUB: 37,
	    START_VALUE_FOR_DIAMOND: 38,
	    END_VALUE_FOR_DIAMOND: 46,
	    VALUE_BIG_JOKER: 1,
	    VALUE_SMALL_JOKER: 2,
	    VALUE_SPADE_SEVEN: 3,
	    VALUE_HEART_SEVEN: 4,
	    VALUE_CLUB_SEVEN: 5,
	    VALUE_DIAMOND_SEVEN: 6,
	    VALUE_SPADE_TWO: 7,
	    VALUE_HEART_TWO: 8,
	    VALUE_CLUB_TWO: 9,
	    VALUE_DIAMOND_TWO: 10,
	    VALUE_SPADE_ACE: 11,
	    VALUE_SPADE_KING: 12,
	    VALUE_SPADE_QUEEN: 13,
	    VALUE_SPADE_JACK: 14,
	    VALUE_SPADE_TEN: 15,
	    VALUE_SPADE_NINE: 16,
	    VALUE_SPADE_EIGHT: 17,
	    VALUE_SPADE_SIX: 18,
	    VALUE_SPADE_FIVE: 19,
	    VALUE_HEART_ACE: 20,
	    VALUE_HEART_KING: 21,
	    VALUE_HEART_QUEEN: 22,
	    VALUE_HEART_JACK: 23,
	    VALUE_HEART_TEN: 24,
	    VALUE_HEART_NINE: 25,
	    VALUE_HEART_EIGHT: 26,
	    VALUE_HEART_SIX: 27,
	    VALUE_HEART_FIVE: 28,
	    VALUE_CLUB_ACE: 29,
	    VALUE_CLUB_KING: 30,
	    VALUE_CLUB_QUEEN: 31,
	    VALUE_CLUB_JACK: 32,
	    VALUE_CLUB_TEN: 33,
	    VALUE_CLUB_NINE: 34,
	    VALUE_CLUB_EIGHT: 35,
	    VALUE_CLUB_SIX: 36,
	    VALUE_CLUB_FIVE: 37,
	    VALUE_DIAMOND_ACE: 38,
	    VALUE_DIAMOND_KING: 39,
	    VALUE_DIAMOND_QUEEN: 40,
	    VALUE_DIAMOND_JACK: 41,
	    VALUE_DIAMOND_TEN: 42,
	    VALUE_DIAMOND_NINE: 43,
	    VALUE_DIAMOND_EIGHT: 44,
	    VALUE_DIAMOND_SIX: 45,
	    VALUE_DIAMOND_FIVE: 46
	  };

	}).call(this);


/***/ },
/* 2 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  module.exports = {
	    screenWidth: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
	    screenHeight: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
	    userId: document.getElementById('userId').innerText,
	    username: document.getElementById('username').innerText,
	    loginToken: document.getElementById('loginToken').innerText,
	    roomName: document.getElementById('roomName').innerText,
	    scaledCardWidth: null,
	    scaledCardHeight: null,
	    scaleWidthRatio: null,
	    scaleHeightRatio: null,
	    currentUserPlayedCards: null,
	    user1PlayedCards: null,
	    user2PlayedCards: null,
	    user3PlayedCards: null,
	    isShowingCoveredCards: false,
	    cardsAtHand: null,
	    coveredCards: null,
	    background: null,
	    playCardsButton: null,
	    historicalButton: null,
	    prepareButton: null,
	    leaveButton: null,
	    surrenderButton: null,
	    settleCoveredCardsButton: null,
	    startSwipeCardIndex: null,
	    endSwipeCardIndex: null,
	    iconOfMainSuit: null,
	    textOfCurrentScores: null,
	    textOfAimedScores: null,
	    textOfEarnedScores: null,
	    textOfChipsWon: null,
	    textOfRoomName: null,
	    player1Username: null,
	    player2Username: null,
	    player3Username: null,
	    user1Avatar: null,
	    user2Avatar: null,
	    user3Avatar: null,
	    meStatusText: null,
	    player1IsMakerIcon: null,
	    player2IsMakerIcon: null,
	    player3IsMakerIcon: null,
	    player1StatusText: null,
	    player2StatusText: null,
	    player3StatusText: null,
	    callScoreStage: null,
	    selectMainStage: null,
	    gameStatus: null,
	    selectSuitButton: null,
	    selectSuitStage: null,
	    mainSuit: null,
	    firstlyPlayedCardValuesForCurrentRound: [],
	    bigSign: null,
	    cardValueRanks: null,
	    meHistoricalPlayedCardValues: [],
	    player1HistoricalPlayedCardValues: [],
	    player2HistoricalPlayedCardValues: [],
	    player3HistoricalPlayedCardValues: [],
	    meHistoricalPlayedCardGroupForOneRound: null,
	    player1HistoricalPlayedCardGroupForOneRound: null,
	    player2HistoricalPlayedCardGroupForOneRound: null,
	    player3HistoricalPlayedCardGroupForOneRound: null,
	    historicalRecordStage: null,
	    historicalRoundIndex: null,
	    isPlayCardButtonVisibleBeforeShowingHistoricalRecordStage: false
	  };

	}).call(this);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var binarySearch, constants, getAllValuesOfMainAndMainSuit, getCardName, getCardValuesForSuit, getPairValuesForSuit, getRanksForMainSuitCards, getStartAndEndValueForSuit, havePairForMainSuit, havePairForSuit, haveSingleForMainSuit, haveSingleForSuit, haveTractorForMainSuit, haveTractorForSuit, isPairForMainSuit, isPairForSuit, isSingleForMainSuit, isSingleForSuit, isTractorForMainSuit, isTractorForSuit, sortCards, sortCardsAfterMainSuitSettled, validateSelectedCardsForPlay,
	    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	  constants = __webpack_require__(1);

	  binarySearch = function(array, x) {
	    var begin, end, mid, n, result;
	    n = array.length;
	    begin = 0;
	    end = n - 1;
	    result = -1;
	    while (begin <= end) {
	      mid = Math.floor((begin + end) / 2);
	      if (array[mid] <= x) {
	        begin = mid + 1;
	        result = mid;
	      } else {
	        end = mid - 1;
	      }
	    }
	    return result;
	  };

	  sortCards = function(array) {
	    var sortNumber;
	    sortNumber = function(a, b) {
	      return a - b;
	    };
	    return array.sort(sortNumber);
	  };

	  sortCardsAfterMainSuitSettled = function(array, mainSuit) {
	    var cardValuesForMain, cardValuesForMainSuit, i, index, indexForDiamondSeven, indexForSmallJoker, indexesForMainSevens, indexesForMainTwos, j, k, l, m, mainSeven, mainTwo, o, ref, ref1, ref2, ref3, ref4;
	    array = sortCards(array);
	    cardValuesForMainSuit = getCardValuesForSuit(mainSuit, array);
	    cardValuesForMain = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, array);
	    if (cardValuesForMain.length !== 0) {
	      indexesForMainSevens = [];
	      indexesForMainTwos = [];
	      mainSeven = null;
	      mainTwo = null;
	      switch (mainSuit) {
	        case constants.INDEX_SUIT_SPADE:
	          mainSeven = constants.VALUE_SPADE_SEVEN;
	          mainTwo = constants.VALUE_SPADE_TWO;
	          break;
	        case constants.INDEX_SUIT_HEART:
	          mainSeven = constants.VALUE_HEART_SEVEN;
	          mainTwo = constants.VALUE_HEART_TWO;
	          break;
	        case constants.INDEX_SUIT_CLUB:
	          mainSeven = constants.VALUE_CLUB_SEVEN;
	          mainTwo = constants.VALUE_CLUB_TWO;
	          break;
	        case constants.INDEX_SUIT_DIAMOND:
	          mainSeven = constants.VALUE_DIAMOND_SEVEN;
	          mainTwo = constants.VALUE_DIAMOND_TWO;
	      }
	      for (i = j = 0, ref = cardValuesForMain.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        if (cardValuesForMain[i] === mainSeven) {
	          indexesForMainSevens.push(i);
	        }
	      }
	      if (indexesForMainSevens.length === 1) {
	        cardValuesForMain.splice(indexesForMainSevens[0], 1);
	        indexForSmallJoker = binarySearch(cardValuesForMain, constants.VALUE_SMALL_JOKER);
	        cardValuesForMain.splice(indexForSmallJoker + 1, 0, mainSeven);
	      } else if (indexesForMainSevens.length === 2) {
	        cardValuesForMain.splice(indexesForMainSevens[0], 2);
	        indexForSmallJoker = binarySearch(cardValuesForMain, constants.VALUE_SMALL_JOKER);
	        cardValuesForMain.splice(indexForSmallJoker + 1, 0, mainSeven);
	        cardValuesForMain.splice(indexForSmallJoker + 1, 0, mainSeven);
	      }
	      for (i = k = 0, ref1 = cardValuesForMain.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	        if (cardValuesForMain[i] === mainTwo) {
	          indexesForMainTwos.push(i);
	        }
	      }
	      if (indexesForMainTwos.length === 1) {
	        cardValuesForMain.splice(indexesForMainTwos[0], 1);
	        indexForDiamondSeven = binarySearch(cardValuesForMain, constants.VALUE_DIAMOND_SEVEN);
	        cardValuesForMain.splice(indexForDiamondSeven + 1, 0, mainTwo);
	      } else if (indexesForMainTwos.length === 2) {
	        cardValuesForMain.splice(indexesForMainTwos[0], 2);
	        indexForDiamondSeven = binarySearch(cardValuesForMain, constants.VALUE_DIAMOND_SEVEN);
	        cardValuesForMain.splice(indexForDiamondSeven + 1, 0, mainTwo);
	        cardValuesForMain.splice(indexForDiamondSeven + 1, 0, mainTwo);
	      }
	      for (i = l = 0, ref2 = cardValuesForMain.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	        index = array.indexOf(cardValuesForMain[i]);
	        array.splice(index, 1);
	      }
	      array = cardValuesForMain.concat(array);
	    }
	    if (cardValuesForMainSuit.length !== 0) {
	      for (i = m = 0, ref3 = cardValuesForMainSuit.length; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
	        index = array.indexOf(cardValuesForMainSuit[i]);
	        array.splice(index, 1);
	      }
	      for (i = o = 0, ref4 = cardValuesForMainSuit.length; 0 <= ref4 ? o < ref4 : o > ref4; i = 0 <= ref4 ? ++o : --o) {
	        array.splice(cardValuesForMain.length + i, 0, cardValuesForMainSuit[i]);
	      }
	    }
	    return array;
	  };


	  /*
	  With the given card value, this function finds out its corresponding card name
	  @param n:                           the card value
	  @return string:                     the corresponding card value
	   */

	  getCardName = function(n) {
	    var cardName;
	    cardName = '';
	    switch (n) {
	      case constants.VALUE_BIG_JOKER:
	        cardName = 'bigJoker';
	        break;
	      case constants.VALUE_SMALL_JOKER:
	        cardName = 'smallJoker';
	        break;
	      case constants.VALUE_SPADE_SEVEN:
	        cardName = 'sevenOfSpades';
	        break;
	      case constants.VALUE_HEART_SEVEN:
	        cardName = 'sevenOfHearts';
	        break;
	      case constants.VALUE_CLUB_SEVEN:
	        cardName = 'sevenOfClubs';
	        break;
	      case constants.VALUE_DIAMOND_SEVEN:
	        cardName = 'sevenOfDiamonds';
	        break;
	      case constants.VALUE_SPADE_TWO:
	        cardName = 'twoOfSpades';
	        break;
	      case constants.VALUE_HEART_TWO:
	        cardName = 'twoOfHearts';
	        break;
	      case constants.VALUE_CLUB_TWO:
	        cardName = 'twoOfClubs';
	        break;
	      case constants.VALUE_DIAMOND_TWO:
	        cardName = 'twoOfDiamonds';
	        break;
	      case constants.VALUE_SPADE_ACE:
	        cardName = 'aceOfSpades';
	        break;
	      case constants.VALUE_SPADE_KING:
	        cardName = 'kingOfSpades';
	        break;
	      case constants.VALUE_SPADE_QUEEN:
	        cardName = 'queenOfSpades';
	        break;
	      case constants.VALUE_SPADE_JACK:
	        cardName = 'jackOfSpades';
	        break;
	      case constants.VALUE_SPADE_TEN:
	        cardName = 'tenOfSpades';
	        break;
	      case constants.VALUE_SPADE_NINE:
	        cardName = 'nineOfSpades';
	        break;
	      case constants.VALUE_SPADE_EIGHT:
	        cardName = 'eightOfSpades';
	        break;
	      case constants.VALUE_SPADE_SIX:
	        cardName = 'sixOfSpades';
	        break;
	      case constants.VALUE_SPADE_FIVE:
	        cardName = 'fiveOfSpades';
	        break;
	      case constants.VALUE_HEART_ACE:
	        cardName = 'aceOfHearts';
	        break;
	      case constants.VALUE_HEART_KING:
	        cardName = 'kingOfHearts';
	        break;
	      case constants.VALUE_HEART_QUEEN:
	        cardName = 'queenOfHearts';
	        break;
	      case constants.VALUE_HEART_JACK:
	        cardName = 'jackOfHearts';
	        break;
	      case constants.VALUE_HEART_TEN:
	        cardName = 'tenOfHearts';
	        break;
	      case constants.VALUE_HEART_NINE:
	        cardName = 'nineOfHearts';
	        break;
	      case constants.VALUE_HEART_EIGHT:
	        cardName = 'eightOfHearts';
	        break;
	      case constants.VALUE_HEART_SIX:
	        cardName = 'sixOfHearts';
	        break;
	      case constants.VALUE_HEART_FIVE:
	        cardName = 'fiveOfHearts';
	        break;
	      case constants.VALUE_CLUB_ACE:
	        cardName = 'aceOfClubs';
	        break;
	      case constants.VALUE_CLUB_KING:
	        cardName = 'kingOfClubs';
	        break;
	      case constants.VALUE_CLUB_QUEEN:
	        cardName = 'queenOfClubs';
	        break;
	      case constants.VALUE_CLUB_JACK:
	        cardName = 'jackOfClubs';
	        break;
	      case constants.VALUE_CLUB_TEN:
	        cardName = 'tenOfClubs';
	        break;
	      case constants.VALUE_CLUB_NINE:
	        cardName = 'nineOfClubs';
	        break;
	      case constants.VALUE_CLUB_EIGHT:
	        cardName = 'eightOfClubs';
	        break;
	      case constants.VALUE_CLUB_SIX:
	        cardName = 'sixOfClubs';
	        break;
	      case constants.VALUE_CLUB_FIVE:
	        cardName = 'fiveOfClubs';
	        break;
	      case constants.VALUE_DIAMOND_ACE:
	        cardName = 'aceOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_KING:
	        cardName = 'kingOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_QUEEN:
	        cardName = 'queenOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_JACK:
	        cardName = 'jackOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_TEN:
	        cardName = 'tenOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_NINE:
	        cardName = 'nineOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_EIGHT:
	        cardName = 'eightOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_SIX:
	        cardName = 'sixOfDiamonds';
	        break;
	      case constants.VALUE_DIAMOND_FIVE:
	        cardName = 'fiveOfDiamonds';
	    }
	    return cardName;
	  };


	  /*
	  Given a suit index, find out the starting card value and ending card value that belongs to that suit
	  @param: suitIndex               the suit index
	  @return: array                  an array that contains the starting card value and ending card value that belongs to that suit
	   */

	  getStartAndEndValueForSuit = function(suitIndex) {
	    var endCardValueForSuit, startCardValueForSuit;
	    startCardValueForSuit = 0;
	    endCardValueForSuit = 0;
	    switch (suitIndex) {
	      case constants.INDEX_SUIT_MAIN:
	        startCardValueForSuit = constants.START_VALUE_FOR_MAIN;
	        endCardValueForSuit = constants.END_VALUE_FOR_MAIN;
	        break;
	      case constants.INDEX_SUIT_SPADE:
	        startCardValueForSuit = constants.START_VALUE_FOR_SPADE;
	        endCardValueForSuit = constants.END_VALUE_FOR_SPADE;
	        break;
	      case constants.INDEX_SUIT_HEART:
	        startCardValueForSuit = constants.START_VALUE_FOR_HEART;
	        endCardValueForSuit = constants.END_VALUE_FOR_HEART;
	        break;
	      case constants.INDEX_SUIT_CLUB:
	        startCardValueForSuit = constants.START_VALUE_FOR_CLUB;
	        endCardValueForSuit = constants.END_VALUE_FOR_CLUB;
	        break;
	      case constants.INDEX_SUIT_DIAMOND:
	        startCardValueForSuit = constants.START_VALUE_FOR_DIAMOND;
	        endCardValueForSuit = constants.END_VALUE_FOR_DIAMOND;
	    }
	    return [startCardValueForSuit, endCardValueForSuit];
	  };


	  /*
	  With the given main suit index, rank all card values and return a map that contains the ranking information
	  @param: mainSuit            the main suit index
	  @return: ranks              the map data structure with format like this:
	                              {
	                                  valueOfCard1: rank1,
	                                  valueOfCard2: rank2,
	                                  ...
	                              }
	   */

	  getRanksForMainSuitCards = function(mainSuit) {
	    var i, j, k, l, m, nonMainSuitCardStartingRank, o, p, q, r, ranks, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, startingRank, t;
	    ranks = {};
	    ranks[constants.VALUE_BIG_JOKER] = 1;
	    ranks[constants.VALUE_SMALL_JOKER] = 2;
	    for (i = j = ref = constants.VALUE_SPADE_SEVEN, ref1 = constants.VALUE_DIAMOND_SEVEN + 1; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	      ranks[i] = 4;
	    }
	    for (i = k = ref2 = constants.VALUE_SPADE_TWO, ref3 = constants.VALUE_DIAMOND_TWO + 1; ref2 <= ref3 ? k < ref3 : k > ref3; i = ref2 <= ref3 ? ++k : --k) {
	      ranks[i] = 6;
	    }
	    nonMainSuitCardStartingRank = 16;
	    for (i = l = ref4 = constants.VALUE_SPADE_ACE, ref5 = constants.VALUE_SPADE_FIVE + 1; ref4 <= ref5 ? l < ref5 : l > ref5; i = ref4 <= ref5 ? ++l : --l) {
	      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_SPADE_ACE;
	    }
	    for (i = m = ref6 = constants.VALUE_HEART_ACE, ref7 = constants.VALUE_HEART_FIVE + 1; ref6 <= ref7 ? m < ref7 : m > ref7; i = ref6 <= ref7 ? ++m : --m) {
	      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_HEART_ACE;
	    }
	    for (i = o = ref8 = constants.VALUE_CLUB_ACE, ref9 = constants.VALUE_CLUB_FIVE + 1; ref8 <= ref9 ? o < ref9 : o > ref9; i = ref8 <= ref9 ? ++o : --o) {
	      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_CLUB_ACE;
	    }
	    for (i = p = ref10 = constants.VALUE_DIAMOND_ACE, ref11 = constants.VALUE_DIAMOND_FIVE + 1; ref10 <= ref11 ? p < ref11 : p > ref11; i = ref10 <= ref11 ? ++p : --p) {
	      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_DIAMOND_ACE;
	    }
	    startingRank = 7;
	    if (mainSuit === constants.INDEX_SUIT_SPADE) {
	      ranks[constants.VALUE_SPADE_SEVEN] = 3;
	      ranks[constants.VALUE_SPADE_TWO] = 5;
	      for (i = q = ref12 = constants.VALUE_SPADE_ACE, ref13 = constants.VALUE_SPADE_FIVE + 1; ref12 <= ref13 ? q < ref13 : q > ref13; i = ref12 <= ref13 ? ++q : --q) {
	        ranks[i] = startingRank + i - constants.VALUE_SPADE_ACE;
	      }
	    } else if (mainSuit === constants.INDEX_SUIT_HEART) {
	      ranks[constants.VALUE_HEART_SEVEN] = 3;
	      ranks[constants.VALUE_HEART_TWO] = 5;
	      for (i = r = ref14 = constants.VALUE_HEART_ACE, ref15 = constants.VALUE_HEART_FIVE + 1; ref14 <= ref15 ? r < ref15 : r > ref15; i = ref14 <= ref15 ? ++r : --r) {
	        ranks[i] = startingRank + i - constants.VALUE_HEART_ACE;
	      }
	    } else if (mainSuit === constants.INDEX_SUIT_CLUB) {
	      ranks[constants.VALUE_CLUB_SEVEN] = 3;
	      ranks[constants.VALUE_CLUB_TWO] = 5;
	      for (i = s = ref16 = constants.VALUE_CLUB_ACE, ref17 = constants.VALUE_CLUB_FIVE + 1; ref16 <= ref17 ? s < ref17 : s > ref17; i = ref16 <= ref17 ? ++s : --s) {
	        ranks[i] = startingRank + i - constants.VALUE_CLUB_ACE;
	      }
	    } else if (mainSuit === constants.INDEX_SUIT_DIAMOND) {
	      ranks[constants.VALUE_DIAMOND_SEVEN] = 3;
	      ranks[constants.VALUE_DIAMOND_TWO] = 5;
	      for (i = t = ref18 = constants.VALUE_DIAMOND_ACE, ref19 = constants.VALUE_DIAMOND_FIVE + 1; ref18 <= ref19 ? t < ref19 : t > ref19; i = ref18 <= ref19 ? ++t : --t) {
	        ranks[i] = startingRank + i - constants.VALUE_DIAMOND_ACE;
	      }
	    }
	    return ranks;
	  };


	  /*
	  Given a array of cards, find out all the card values that belongs to the designated suit
	  @param: suitIndex                       the suit index
	  @param: cardValues                      the card values in which to look for
	  @return: cardValuesForSuit              the card values that belongs to the given suit in the given card values
	   */

	  getCardValuesForSuit = function(suitIndex, cardValues) {
	    var cardValuesForSuit, i, j, ref, startAndEndValuesForSuit;
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    cardValuesForSuit = [];
	    for (i = j = 0, ref = cardValues.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (cardValues[i] >= startAndEndValuesForSuit[0] && cardValues[i] <= startAndEndValuesForSuit[1]) {
	        cardValuesForSuit.push(cardValues[i]);
	      }
	    }
	    return cardValuesForSuit;
	  };


	  /*
	  Given the main suit index, this function finds out all card values that is either main card or main suit card
	  @param: mainSuit                        the main suit index
	  @return array                           all card values that is either main card or main suit card
	   */

	  getAllValuesOfMainAndMainSuit = function(mainSuit) {
	    var i, j, k, ref, ref1, ref2, ref3, startAndEndValuesForMain, startAndEndValuesForMainSuit, valuesOfMainAndMainSuit;
	    startAndEndValuesForMain = getStartAndEndValueForSuit(constants.INDEX_SUIT_MAIN);
	    startAndEndValuesForMainSuit = getStartAndEndValueForSuit(mainSuit);
	    valuesOfMainAndMainSuit = [];
	    for (i = j = ref = startAndEndValuesForMain[0], ref1 = startAndEndValuesForMain[1] + 1; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	      valuesOfMainAndMainSuit.push(i);
	    }
	    for (i = k = ref2 = startAndEndValuesForMainSuit[0], ref3 = startAndEndValuesForMainSuit[1] + 1; ref2 <= ref3 ? k < ref3 : k > ref3; i = ref2 <= ref3 ? ++k : --k) {
	      valuesOfMainAndMainSuit.push(i);
	    }
	    return valuesOfMainAndMainSuit;
	  };


	  /*
	  Given a suit index and card values at hand, this function finds out all pairs within card values at hand that are the given suit
	  @param: suitIndex                       the given suit index
	  @param: cardValues                      the card values from which to search pairs for
	  @return: array                          all the values of pairs that satisfies the condition
	   */

	  getPairValuesForSuit = function(suitIndex, cardValues) {
	    var cardValuesOfSuit, i, j, pairValues, ref;
	    cardValuesOfSuit = getCardValuesForSuit(suitIndex, cardValues);
	    pairValues = [];
	    if (cardValuesOfSuit.length === 0) {
	      return pairValues;
	    }
	    for (i = j = 0, ref = cardValuesOfSuit.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (cardValuesOfSuit[i] === cardValuesOfSuit[i + 1]) {
	        pairValues.push(cardValuesOfSuit[i]);
	      }
	    }
	    return pairValues;
	  };


	  /*
	  Check whether the card values contain at least 1 card of specific suit
	  @param: suitIndex                           designated suit index
	  @param: cardvaluesAtHand                    the given card values in which to search for
	  @return: boolean                            true if at least one card of the suit in the array of card values, false otherwise
	   */

	  haveSingleForSuit = function(suitIndex, cardValues) {
	    var cardValuesOfSuit;
	    cardValuesOfSuit = getCardValuesForSuit(suitIndex, cardValues);
	    if (cardValuesOfSuit.length > 0) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  haveSingleForMainSuit = function(mainSuit, cardValues) {
	    var cardValuesForMain, cardValuesForMainSuit;
	    cardValuesForMain = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, cardValues);
	    cardValuesForMainSuit = getCardValuesForSuit(mainSuit, cardValues);
	    if (cardValuesForMain.length > 0 || cardValuesForMainSuit.length > 0) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  havePairForSuit = function(suitIndex, cardValues) {
	    var cardValuesOfSuit, i, j, ref;
	    cardValuesOfSuit = getCardValuesForSuit(suitIndex, cardValues);
	    if (cardValuesOfSuit.length === 0) {
	      return false;
	    }
	    for (i = j = 0, ref = cardValuesOfSuit.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (cardValuesOfSuit[i] === cardValuesOfSuit[i + 1]) {
	        return true;
	      }
	    }
	    return false;
	  };

	  havePairForMainSuit = function(mainSuit, cardValues) {
	    var cardValuesForMain, cardValuesForMainSuit, i, j, mains, ref;
	    cardValuesForMain = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, cardValues);
	    cardValuesForMainSuit = getCardValuesForSuit(mainSuit, cardValues);
	    mains = cardValuesForMain.concat(cardValuesForMainSuit);
	    if (mains.length === 0) {
	      return false;
	    }
	    for (i = j = 0, ref = mains.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (mains[i] === mains[i + 1]) {
	        return true;
	      }
	    }
	    return false;
	  };

	  haveTractorForSuit = function(tractorLength, suitIndex, cardValues) {
	    var i, j, numOfConsecutivePairs, pairValuesOfSuit, ref;
	    pairValuesOfSuit = getPairValuesForSuit(suitIndex, cardValues);
	    if (pairValuesOfSuit.length === 0) {
	      return false;
	    }
	    if (pairValuesOfSuit.length < tractorLength) {
	      return false;
	    }
	    numOfConsecutivePairs = 1;
	    for (i = j = 0, ref = pairValuesOfSuit.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if ((pairValuesOfSuit[i] + 1) === pairValuesOfSuit[i + 1]) {
	        numOfConsecutivePairs += 1;
	        if (numOfConsecutivePairs === tractorLength) {
	          return true;
	        }
	      } else {
	        numOfConsecutivePairs = 0;
	      }
	    }
	    return false;
	  };

	  haveTractorForMainSuit = function(tractorLength, mainSuit, cardValues, cardValueRanks) {
	    var i, j, k, numOfConsecutivePairs, pairRanks, pairValuesOfMain, pairValuesOfSuit, pairs, ref, ref1;
	    pairValuesOfMain = getPairValuesForSuit(constants.INDEX_SUIT_MAIN, cardValues);
	    pairValuesOfSuit = getPairValuesForSuit(mainSuit, cardValues);
	    pairs = pairValuesOfMain.concat(pairValuesOfSuit);
	    if (pairs.length === 0) {
	      return false;
	    }
	    if (pairs.length < tractorLength) {
	      return false;
	    }
	    numOfConsecutivePairs = 1;
	    pairRanks = [];
	    for (i = j = 0, ref = pairs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      pairRanks.push(cardValueRanks[pairs[i]]);
	    }
	    pairRanks = sortCards(pairRanks);
	    for (i = k = 0, ref1 = pairRanks.length - 1; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      if ((pairRanks[i] + 1) === pairRanks[i + 1]) {
	        numOfConsecutivePairs += 1;
	        if (numOfConsecutivePairs === tractorLength) {
	          return true;
	        }
	      } else {
	        numOfConsecutivePairs = 0;
	      }
	    }
	    return false;
	  };

	  isSingleForSuit = function(suitIndex, cardValues) {
	    var startAndEndValuesForSuit;
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    if (cardValues.length === 1 && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[0] <= startAndEndValuesForSuit[1]) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isSingleForMainSuit = function(mainSuit, cardValues) {
	    var ref, valuesOfMainAndMainSuit;
	    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
	    if (cardValues.length === 1 && (ref = cardValues[0], indexOf.call(valuesOfMainAndMainSuit, ref) >= 0)) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isPairForSuit = function(suitIndex, cardValues) {
	    var startAndEndValuesForSuit;
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[1] <= startAndEndValuesForSuit[1]) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isPairForMainSuit = function(mainSuit, cardValues) {
	    var ref, valuesOfMainAndMainSuit;
	    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
	    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && (ref = cardValues[0], indexOf.call(valuesOfMainAndMainSuit, ref) >= 0)) {
	      return true;
	    } else {
	      return false;
	    }
	  };

	  isTractorForSuit = function(tractorLength, suitIndex, cardValues, cardValueRanks) {
	    var i, j, pairRanks, ref, startAndEndValuesForSuit;
	    if (tractorLength === 0 || cardValues.length < 4) {
	      return false;
	    }
	    if (cardValues.length < tractorLength * 2 || cardValues.length % 2 !== 0) {
	      return false;
	    }
	    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
	    if (cardValues[0] < startAndEndValuesForSuit[0] || cardValues[cardValues.length - 1] > startAndEndValuesForSuit[1]) {
	      return false;
	    }
	    i = 0;
	    pairRanks = [];
	    while (i <= (cardValues.length - 2)) {
	      if (cardValues[i] !== cardValues[i + 1]) {
	        return false;
	      } else {
	        pairRanks.push(cardValueRanks[cardValues[i]]);
	      }
	      i += 2;
	    }
	    pairRanks = sortCards(pairRanks);
	    for (i = j = 0, ref = pairRanks.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if ((pairRanks[i] + 1) !== pairRanks[i + 1]) {
	        return false;
	      }
	    }
	    return true;
	  };

	  isTractorForMainSuit = function(tractorLength, mainSuit, cardValues, cardValueRanks) {
	    var i, j, k, pairRanks, ref, ref1, ref2, valuesOfMainAndMainSuit;
	    if (tractorLength === 0 || cardValues.length < 4) {
	      return false;
	    }
	    if (cardValues.length < tractorLength * 2 || cardValues.length % 2 !== 0) {
	      return false;
	    }
	    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
	    for (i = j = 0, ref = cardValues.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (ref1 = cardValues[i], indexOf.call(valuesOfMainAndMainSuit, ref1) < 0) {
	        return false;
	      }
	    }
	    i = 0;
	    pairRanks = [];
	    while (i <= (cardValues.length - 2)) {
	      if (cardValues[i] !== cardValues[i + 1]) {
	        return false;
	      } else {
	        pairRanks.push(cardValueRanks[cardValues[i]]);
	      }
	      i += 2;
	    }
	    pairRanks = sortCards(pairRanks);
	    for (i = k = 0, ref2 = pairRanks.length - 1; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
	      if ((pairRanks[i] + 1) !== pairRanks[i + 1]) {
	        return false;
	      }
	    }
	    return true;
	  };

	  validateSelectedCardsForPlay = function(selectedCardValues, firstlyPlayedCardValues, cardValuesAtHand, mainSuit, cardValueRanks) {
	    var numberOfCardsAtHandForSpecificSuit, numberOfCardsInSelectedCardsForSpecificSuit, numberOfMainCardsAtHand, numberOfMainCardsInSelectedCards, pairValuesAtHandOfSuit, selectedPairValuesOfSuit, suitForFirstlyPlayedCards;
	    if (selectedCardValues.length === 0) {
	      return false;
	    }
	    if (firstlyPlayedCardValues.length > 0) {
	      suitForFirstlyPlayedCards = null;
	      if (isSingleForMainSuit(mainSuit, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_MAIN;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_SPADE, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_SPADE;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_HEART, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_HEART;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_CLUB, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_CLUB;
	      } else if (isSingleForSuit(constants.INDEX_SUIT_DIAMOND, [firstlyPlayedCardValues[0]])) {
	        suitForFirstlyPlayedCards = constants.INDEX_SUIT_DIAMOND;
	      }
	      if (selectedCardValues.length !== firstlyPlayedCardValues.length) {
	        return false;
	      }
	      if (suitForFirstlyPlayedCards === constants.INDEX_SUIT_MAIN) {
	        numberOfMainCardsInSelectedCards = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, selectedCardValues).length + getCardValuesForSuit(mainSuit, selectedCardValues).length;
	        numberOfMainCardsAtHand = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand).length + getCardValuesForSuit(mainSuit, cardValuesAtHand).length;
	        if (numberOfMainCardsInSelectedCards < firstlyPlayedCardValues.length && numberOfMainCardsInSelectedCards !== numberOfMainCardsAtHand) {
	          return false;
	        }
	      } else {
	        numberOfCardsInSelectedCardsForSpecificSuit = getCardValuesForSuit(suitForFirstlyPlayedCards, selectedCardValues).length;
	        numberOfCardsAtHandForSpecificSuit = getCardValuesForSuit(suitForFirstlyPlayedCards, cardValuesAtHand).length;
	        if ((numberOfCardsInSelectedCardsForSpecificSuit < firstlyPlayedCardValues.length) && (numberOfCardsInSelectedCardsForSpecificSuit !== numberOfCardsAtHandForSpecificSuit)) {
	          return false;
	        }
	      }
	      if (isSingleForMainSuit(mainSuit, firstlyPlayedCardValues)) {
	        if (haveSingleForMainSuit(mainSuit, cardValuesAtHand) && !isSingleForMainSuit(mainSuit, selectedCardValues)) {
	          return false;
	        }
	      } else if (isSingleForSuit(suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
	        if (haveSingleForSuit(suitForFirstlyPlayedCards, cardValuesAtHand) && !isSingleForSuit(suitForFirstlyPlayedCards, selectedCardValues)) {
	          return false;
	        }
	      } else if (isPairForMainSuit(mainSuit, firstlyPlayedCardValues)) {
	        if (havePairForMainSuit(mainSuit, cardValuesAtHand)) {
	          if (!isPairForMainSuit(mainSuit, selectedCardValues)) {
	            return false;
	          }
	        }
	      } else if (isPairForSuit(suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
	        if (havePairForSuit(suitForFirstlyPlayedCards, cardValuesAtHand)) {
	          if (!isPairForSuit(suitForFirstlyPlayedCards, selectedCardValues)) {
	            return false;
	          }
	        }
	      } else if (isTractorForMainSuit(firstlyPlayedCardValues.length / 2, mainSuit, firstlyPlayedCardValues, cardValueRanks)) {
	        if (haveTractorForMainSuit(firstlyPlayedCardValues.length / 2, mainSuit, cardValuesAtHand, cardValueRanks)) {
	          if (!isTractorForMainSuit(selectedCardValues.length / 2, mainSuit, selectedCardValues, cardValueRanks)) {
	            return false;
	          }
	        }
	        pairValuesAtHandOfSuit = getPairValuesForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
	        pairValuesAtHandOfSuit = pairValuesAtHandOfSuit.concat(getPairValuesForSuit(mainSuit, cardValuesAtHand));
	        selectedPairValuesOfSuit = getPairValuesForSuit(constants.INDEX_SUIT_MAIN, selectedCardValues);
	        selectedPairValuesOfSuit = selectedPairValuesOfSuit.concat(getPairValuesForSuit(mainSuit, selectedCardValues));
	        if (selectedPairValuesOfSuit.length < firstlyPlayedCardValues.length / 2) {
	          if ((selectedPairValuesOfSuit.length !== pairValuesAtHandOfSuit.length) && (pairValuesAtHandOfSuit.length !== 0)) {
	            return false;
	          }
	        }
	      } else if (isTractorForSuit(firstlyPlayedCardValues.length / 2, suitForFirstlyPlayedCards, firstlyPlayedCardValues, cardValueRanks)) {
	        if (haveTractorForSuit(firstlyPlayedCardValues.length / 2, suitForFirstlyPlayedCards, cardValuesAtHand)) {
	          if (!isTractorForSuit(selectedCardValues.length / 2, suitForFirstlyPlayedCards, selectedCardValues, cardValueRanks)) {
	            return false;
	          }
	        }
	        pairValuesAtHandOfSuit = getPairValuesForSuit(suitForFirstlyPlayedCards, cardValuesAtHand);
	        selectedPairValuesOfSuit = getPairValuesForSuit(suitForFirstlyPlayedCards, selectedCardValues);
	        if (selectedPairValuesOfSuit.length < firstlyPlayedCardValues.length / 2) {
	          if (selectedPairValuesOfSuit.length !== pairValuesAtHandOfSuit.length && pairValuesAtHandOfSuit.length !== 0) {
	            return false;
	          }
	        }
	      }
	    } else {
	      if ((selectedCardValues.length > 1) && (selectedCardValues.length % 2 !== 0)) {
	        return false;
	      }
	      if ((selectedCardValues.length === 2) && (selectedCardValues[0] !== selectedCardValues[1])) {
	        return false;
	      }
	      if (selectedCardValues.length >= 4) {
	        if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_SPADE, selectedCardValues, cardValueRanks)) {
	          return true;
	        } else if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_HEART, selectedCardValues, cardValueRanks)) {
	          return true;
	        } else if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_CLUB, selectedCardValues, cardValueRanks)) {
	          return true;
	        } else if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_DIAMOND, selectedCardValues, cardValueRanks)) {
	          return true;
	        } else if (isTractorForMainSuit(selectedCardValues.length / 2, mainSuit, selectedCardValues, cardValueRanks)) {
	          return true;
	        } else {
	          return false;
	        }
	      }
	    }
	    return true;
	  };

	  module.exports = {
	    sortCards: sortCards,
	    getCardName: getCardName,
	    validateSelectedCardsForPlay: validateSelectedCardsForPlay,
	    getCardValuesForSuit: getCardValuesForSuit,
	    havePairForSuit: havePairForSuit,
	    haveSingleForSuit: haveSingleForSuit,
	    getPairValuesForSuit: getPairValuesForSuit,
	    haveTractorForSuit: haveTractorForSuit,
	    getRanksForMainSuitCards: getRanksForMainSuitCards,
	    sortCardsAfterMainSuitSettled: sortCardsAfterMainSuitSettled,
	    binarySearch: binarySearch
	  };

	}).call(this);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var actions, constants, getRoomInfo, globalVariables, setPlayerStatusTextForOneUserAndClearStatusTextForOthers, socketEventHandler, toolbox;

	  constants = __webpack_require__(1);

	  actions = __webpack_require__(5);

	  toolbox = __webpack_require__(3);

	  globalVariables = __webpack_require__(2);


	  /*
	  Set status text for one player and clear status text for all other players
	  @param: username                                player username whose status text needs to be updated
	  @param: statusText                              the status text string
	  @return: -
	   */

	  setPlayerStatusTextForOneUserAndClearStatusTextForOthers = function(username, statusText) {
	    globalVariables.meStatusText.text = '';
	    globalVariables.player1StatusText.text = '';
	    globalVariables.player2StatusText.text = '';
	    globalVariables.player3StatusText.text = '';
	    if (username === globalVariables.username) {
	      return globalVariables.meStatusText.text = statusText;
	    } else if (username === globalVariables.player1Username.text) {
	      return globalVariables.player1StatusText.text = statusText;
	    } else if (username === globalVariables.player2Username.text) {
	      return globalVariables.player2StatusText.text = statusText;
	    } else if (username === globalVariables.player3Username.text) {
	      return globalVariables.player3StatusText.text = statusText;
	    }
	  };

	  getRoomInfo = function(game) {
	    return io.socket.get('/get_room_info', {
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      var diff, i, j, k, readyPlayers, ref, ref1, ref2, results, seatIndexOfCurrentUser, seats, usernames;
	      if (jwres.statusCode === 200) {
	        globalVariables.textOfRoomName.text = resData.roomName;
	        usernames = resData.usernames;
	        seats = [resData.seats.one, resData.seats.two, resData.seats.three, resData.seats.four];
	        seatIndexOfCurrentUser = seats.indexOf(globalVariables.username);
	        for (i = j = ref = seatIndexOfCurrentUser + 1, ref1 = seatIndexOfCurrentUser + 4; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	          if (seats[i % 4] !== '') {
	            diff = i - seatIndexOfCurrentUser;
	            switch (diff) {
	              case 1 || -3:
	                actions.showPlayer1Info(game, seats[i % 4]);
	                break;
	              case 2 || -2:
	                actions.showPlayer2Info(game, seats[i % 4]);
	                break;
	              case 3 || -1:
	                actions.showPlayer3Info(game, seats[i % 4]);
	            }
	          }
	        }
	        readyPlayers = resData.readyPlayers;
	        results = [];
	        for (i = k = 0, ref2 = readyPlayers.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
	          if (globalVariables.player1Username) {
	            if (readyPlayers[i] === globalVariables.player1Username.text) {
	              globalVariables.player1StatusText.text = 'Ready';
	            }
	          }
	          if (globalVariables.player2Username) {
	            if (readyPlayers[i] === globalVariables.player2Username.text) {
	              globalVariables.player2StatusText.text = 'Ready';
	            }
	          }
	          if (globalVariables.player3Username) {
	            if (readyPlayers[i] === globalVariables.player3Username.text) {
	              results.push(globalVariables.player3StatusText.text = 'Ready');
	            } else {
	              results.push(void 0);
	            }
	          } else {
	            results.push(void 0);
	          }
	        }
	        return results;
	      }
	    });
	  };

	  socketEventHandler = function(game) {
	    io.socket.on('newPlayerJoined', function(data) {
	      var diff, newPlayerUsername, seatIndexOfCurrentUser, seatIndexOfNewPlayer, seats;
	      newPlayerUsername = data.newPlayer;
	      seats = [data.seats.one, data.seats.two, data.seats.three, data.seats.four];
	      seatIndexOfCurrentUser = seats.indexOf(globalVariables.username);
	      seatIndexOfNewPlayer = seats.indexOf(newPlayerUsername);
	      diff = seatIndexOfNewPlayer - seatIndexOfCurrentUser;
	      if (diff === 1 || diff === -3) {
	        actions.showPlayer1Info(game, newPlayerUsername);
	      }
	      if (diff === 2 || diff === -2) {
	        actions.showPlayer2Info(game, newPlayerUsername);
	      }
	      if (diff === 3 || diff === -1) {
	        actions.showPlayer3Info(game, newPlayerUsername);
	      }
	    });
	    io.socket.on('playerLeavedRoom', function(data) {
	      var leftUsername;
	      leftUsername = data.username;
	      return actions.hideLeftPlayer(leftUsername);
	    });
	    io.socket.on('playerReady', function(data) {
	      var readyUsername;
	      readyUsername = data.username;
	      if (globalVariables.player1Username) {
	        if (readyUsername === globalVariables.player1Username.text) {
	          globalVariables.player1StatusText.text = 'Ready';
	        }
	      }
	      if (globalVariables.player2Username) {
	        if (readyUsername === globalVariables.player2Username.text) {
	          globalVariables.player2StatusText.text = 'Ready';
	        }
	      }
	      if (globalVariables.player3Username) {
	        if (readyUsername === globalVariables.player3Username.text) {
	          return globalVariables.player3StatusText.text = 'Ready';
	        }
	      }
	    });
	    io.socket.on('cardsSent', function(data) {
	      var usernameToCallScore;
	      globalVariables.cardsAtHand.values = data.cards;
	      globalVariables.cardsAtHand.values = data.cards;
	      usernameToCallScore = data.usernameToCallScore;
	      globalVariables.cardsAtHand.values = toolbox.sortCards(globalVariables.cardsAtHand.values);
	      actions.displayCards(globalVariables.cardsAtHand.values);
	      globalVariables.meStatusText.text = '';
	      globalVariables.player1StatusText.text = '';
	      globalVariables.player2StatusText.text = '';
	      globalVariables.player3StatusText.text = '';
	      globalVariables.textOfAimedScores.text = '80';
	      globalVariables.textOfCurrentScores.text = '0';
	      if (usernameToCallScore === globalVariables.username) {
	        return actions.showCallScorePanel(game, 80);
	      } else {
	        if (usernameToCallScore === globalVariables.player1Username.text) {
	          return globalVariables.player1StatusText.text = '叫分中...';
	        } else if (usernameToCallScore === globalVariables.player2Username.text) {
	          return globalVariables.player2StatusText.text = '叫分中...';
	        } else if (usernameToCallScore === globalVariables.player3Username.text) {
	          return globalVariables.player3StatusText.text = '叫分中...';
	        }
	      }
	    });
	    io.socket.on('userCalledScore', function(data) {
	      var currentAimedScore, usernameCalledScore, usernameToCallScore;
	      currentAimedScore = data.currentAimedScore;
	      usernameCalledScore = data.usernameCalledScore;
	      usernameToCallScore = data.usernameToCallScore;
	      globalVariables.textOfAimedScores.text = '' + currentAimedScore;
	      if (usernameToCallScore === globalVariables.username) {
	        globalVariables.meStatusText.text = '叫分中...';
	        actions.showCallScorePanel(game, currentAimedScore);
	      } else if (usernameToCallScore === globalVariables.player1Username.text) {
	        globalVariables.player1StatusText.text = '叫分中...';
	      } else if (usernameToCallScore === globalVariables.player2Username.text) {
	        globalVariables.player2StatusText.text = '叫分中...';
	      } else if (usernameToCallScore === globalVariables.player3Username.text) {
	        globalVariables.player3StatusText.text = '叫分中...';
	      }
	      if (usernameCalledScore === globalVariables.player1Username.text) {
	        return globalVariables.player1StatusText.text = currentAimedScore + '分';
	      } else if (usernameCalledScore === globalVariables.player2Username.text) {
	        return globalVariables.player2StatusText.text = currentAimedScore + '分';
	      } else if (usernameCalledScore === globalVariables.player3Username.text) {
	        return globalVariables.player3StatusText.text = currentAimedScore + '分';
	      }
	    });
	    io.socket.on('userPassed', function(data) {
	      var currentAimedScore, passedUser, usernameToCallScore;
	      passedUser = data.passedUser;
	      usernameToCallScore = data.usernameToCallScore;
	      currentAimedScore = data.aimedScore;
	      if (passedUser === globalVariables.player1Username.text) {
	        globalVariables.player1StatusText.text = '不要';
	      } else if (passedUser === globalVariables.player2Username.text) {
	        globalVariables.player2StatusText.text = '不要';
	      } else if (passedUser === globalVariables.player3Username.text) {
	        globalVariables.player3StatusText.text = '不要';
	      }
	      if (usernameToCallScore === globalVariables.username) {
	        return actions.showCallScorePanel(game, currentAimedScore);
	      }
	    });
	    io.socket.on('makerSettled', function(data) {
	      var aimedScore, coveredCards, makerUsername;
	      aimedScore = data.aimedScore;
	      makerUsername = data.makerUsername;
	      globalVariables.textOfAimedScores.text = aimedScore + '分';
	      if (makerUsername === globalVariables.player1Username.text) {
	        globalVariables.player1IsMakerIcon.visible = true;
	      } else if (makerUsername === globalVariables.player2Username.text) {
	        globalVariables.player2IsMakerIcon.visible = true;
	      } else if (makerUsername === globalVariables.player3Username.text) {
	        globalVariables.player3IsMakerIcon.visible = true;
	      }
	      if (makerUsername === globalVariables.username) {
	        coveredCards = data.coveredCards;
	        globalVariables.cardsAtHand.values = globalVariables.cardsAtHand.values.concat(coveredCards);
	        globalVariables.cardsAtHand.values = toolbox.sortCards(globalVariables.cardsAtHand.values);
	        actions.displayCards(globalVariables.cardsAtHand.values);
	        globalVariables.surrenderButton.visible = true;
	        globalVariables.settleCoveredCardsButton.visible = true;
	        globalVariables.settleCoveredCardsButton.inputEnabled = false;
	        globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	      }
	      globalVariables.gameStatus = constants.GAME_STATUS_SETTLING_COVERED_CARDS;
	      return setPlayerStatusTextForOneUserAndClearStatusTextForOthers(makerUsername, '庄家埋底中...');
	    });
	    io.socket.on('finishedSettlingCoveredCards', function(data) {
	      var makerUsername;
	      makerUsername = data.maker;
	      return setPlayerStatusTextForOneUserAndClearStatusTextForOthers(makerUsername, '庄家选主中...');
	    });
	    io.socket.on('mainSuitChosen', function(data) {
	      var makerUsername;
	      globalVariables.gameStatus = constants.GAME_STATUS_PLAYING;
	      globalVariables.mainSuit = data.mainSuit;
	      globalVariables.cardValueRanks = toolbox.getRanksForMainSuitCards(globalVariables.mainSuit);
	      makerUsername = data.maker;
	      globalVariables.iconOfMainSuit.frame = globalVariables.mainSuit;
	      setPlayerStatusTextForOneUserAndClearStatusTextForOthers(makerUsername, '出牌中...');
	      globalVariables.cardsAtHand.values = toolbox.sortCardsAfterMainSuitSettled(globalVariables.cardsAtHand.values, globalVariables.mainSuit);
	      return actions.displayCards(globalVariables.cardsAtHand.values);
	    });
	    io.socket.on('cardPlayed', function(data) {
	      var n, nextPlayerUsername, playedCardValues, usernamePlayedCards;
	      usernamePlayedCards = data.playerName;
	      playedCardValues = data.playedCardValues;
	      globalVariables.firstlyPlayedCardValuesForCurrentRound = data.firstlyPlayedCardValues;
	      nextPlayerUsername = data.nextPlayerUsername;
	      n = -1;
	      if (usernamePlayedCards === globalVariables.username) {
	        globalVariables.meHistoricalPlayedCardValues.push(playedCardValues);
	      } else if (usernamePlayedCards === globalVariables.player1Username.text) {
	        globalVariables.player1HistoricalPlayedCardValues.push(playedCardValues);
	        n = 1;
	      } else if (usernamePlayedCards === globalVariables.player2Username.text) {
	        globalVariables.player2HistoricalPlayedCardValues.push(playedCardValues);
	        n = 2;
	      } else if (usernamePlayedCards === globalVariables.player3Username.text) {
	        globalVariables.player3HistoricalPlayedCardValues.push(playedCardValues);
	        n = 3;
	      }
	      if (n !== -1) {
	        actions.showPlayedCardsForUser(n, playedCardValues, true);
	      }
	      if (nextPlayerUsername === globalVariables.username) {
	        globalVariables.playCardsButton.inputEnabled = false;
	        globalVariables.playCardsButton.setFrames(2, 2, 2);
	        globalVariables.playCardsButton.visible = true;
	      }
	      return setPlayerStatusTextForOneUserAndClearStatusTextForOthers(nextPlayerUsername, '出牌中...');
	    });
	    return io.socket.on('roundFinished', function(data) {
	      var n, playedCardValues, scoresEarned, usernamePlayedCards, usernameWithLargestCardsForCurrentRound;
	      usernamePlayedCards = data.lastPlayerName;
	      playedCardValues = data.playedCardValues;
	      scoresEarned = data.scoresEarned;
	      usernameWithLargestCardsForCurrentRound = data.usernameWithLargestCardsForCurrentRound;
	      n = -1;
	      if (usernamePlayedCards === globalVariables.username) {
	        globalVariables.meHistoricalPlayedCardValues.push(playedCardValues);
	      } else if (usernamePlayedCards === globalVariables.player1Username.text) {
	        globalVariables.player1HistoricalPlayedCardValues.push(playedCardValues);
	        n = 1;
	      } else if (usernamePlayedCards === globalVariables.player2Username.text) {
	        globalVariables.player2HistoricalPlayedCardValues.push(playedCardValues);
	        n = 2;
	      } else if (usernamePlayedCards === globalVariables.player3Username.text) {
	        globalVariables.player3HistoricalPlayedCardValues.push(playedCardValues);
	        n = 3;
	      }
	      if (n !== -1) {
	        actions.showPlayedCardsForUser(n, playedCardValues, true);
	      }
	      actions.showBigStampForTheLargestPlayedCardsCurrentRound(playedCardValues.length, usernameWithLargestCardsForCurrentRound, game);
	      globalVariables.textOfCurrentScores.text = parseInt(globalVariables.textOfCurrentScores.text) + scoresEarned;
	      if (scoresEarned !== 0) {
	        actions.showEarnedScoreTextWithFadeOutEffect(scoresEarned, game);
	      }
	      globalVariables.firstlyPlayedCardValuesForCurrentRound = [];
	      globalVariables.historicalButton.inputEnabled = true;
	      globalVariables.historicalButton.visible = true;
	      return setTimeout(function() {
	        if (data.shouldGameEndInAdvance || globalVariables.cardsAtHand.children.length === 0) {
	          return actions.endGame();
	        }
	        globalVariables.bigSign.destroy();
	        globalVariables.currentUserPlayedCards.removeAll();
	        globalVariables.user1PlayedCards.removeAll();
	        globalVariables.user2PlayedCards.removeAll();
	        globalVariables.user3PlayedCards.removeAll();
	        if (globalVariables.cardsAtHand.children.length !== 0) {
	          if (usernameWithLargestCardsForCurrentRound === globalVariables.username) {
	            globalVariables.playCardsButton.inputEnabled = false;
	            globalVariables.playCardsButton.setFrames(2, 2, 2);
	            globalVariables.playCardsButton.visible = true;
	          }
	          return setPlayerStatusTextForOneUserAndClearStatusTextForOthers(usernameWithLargestCardsForCurrentRound, '出牌中...');
	        }
	      }, 2000);
	    });
	  };

	  module.exports = {
	    getRoomInfo: getRoomInfo,
	    socketEventHandler: socketEventHandler
	  };

	}).call(this);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  var backgroundTapped, constants, displayCards, endGame, globalVariables, hideHistoricalRecordStage, hideLeftPlayer, leaveRoom, lowerScore, pass, playSelectedCards, raiseScore, selectSuit, sendGetReadyMessage, setScore, settleCoveredCards, showBigStampForTheLargestPlayedCardsCurrentRound, showCallScorePanel, showCoveredCards, showEarnedScoreTextWithFadeOutEffect, showHistoricallyPlayedCards, showLastRoundPlayedCards, showNextRoundPlayedCards, showPlayedCardsForUser, showPlayer1Info, showPlayer2Info, showPlayer3Info, showSelectSuitPanel, suitTapEffect, surrender, tapDownOnSprite, tapUp, toggleCardSelection, toggleLastAndNextRoundButton, toolbox;

	  constants = __webpack_require__(1);

	  globalVariables = __webpack_require__(2);

	  toolbox = __webpack_require__(3);

	  toggleCardSelection = function(sprite) {
	    if (!sprite.isSelected) {
	      sprite.y = sprite.y - constants.SELECTED_CARD_Y_OFFSET;
	    } else {
	      sprite.y = sprite.y + constants.SELECTED_CARD_Y_OFFSET;
	    }
	    return sprite.isSelected = !sprite.isSelected;
	  };

	  displayCards = function(array) {
	    var cardName, cardSprite, i, j, k, l, leftMargin, ref, ref1, ref2, results, spritesShouldBeRemoved;
	    leftMargin = (globalVariables.screenWidth - (Math.floor(globalVariables.scaledCardWidth / 4) * array.length + Math.floor(3 * globalVariables.scaledCardWidth / 4))) / 2;
	    spritesShouldBeRemoved = [];
	    if (globalVariables.cardsAtHand.children.length > 0) {
	      for (i = j = 0, ref = globalVariables.cardsAtHand.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        spritesShouldBeRemoved.push(globalVariables.cardsAtHand.children[i]);
	      }
	      for (i = k = 0, ref1 = spritesShouldBeRemoved.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	        globalVariables.cardsAtHand.remove(spritesShouldBeRemoved[i]);
	      }
	    }
	    results = [];
	    for (i = l = 0, ref2 = array.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	      cardName = toolbox.getCardName(array[i]);
	      cardSprite = globalVariables.cardsAtHand.create(leftMargin + i * Math.floor(globalVariables.scaledCardWidth / 4), globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.MARGIN, cardName);
	      cardSprite.scale.setTo(globalVariables.scaleWidthRatio, globalVariables.scaleHeightRatio);
	      cardSprite.isSelected = false;
	      cardSprite.inputEnabled = true;
	      cardSprite.index = i;
	      cardSprite.value = array[i];
	      cardSprite.input.useHandCursor = true;
	      cardSprite.events.onInputDown.add(tapDownOnSprite, this);
	      results.push(cardSprite.events.onInputUp.add(tapUp, this));
	    }
	    return results;
	  };

	  showEarnedScoreTextWithFadeOutEffect = function(numOfScoresEarnedCurrentRound, game) {
	    globalVariables.textOfEarnedScores.text = '+ ' + numOfScoresEarnedCurrentRound;
	    globalVariables.textOfEarnedScores.alpha = 1;
	    return game.add.tween(globalVariables.textOfEarnedScores).to({
	      alpha: 0
	    }, 2000, Phaser.Easing.Linear.None, true);
	  };

	  showBigStampForTheLargestPlayedCardsCurrentRound = function(numOfCardsPlayed, usernameWithLargestCardsForCurrentRound, game) {
	    var startX, startY;
	    startX = null;
	    startY = null;
	    if (usernameWithLargestCardsForCurrentRound === globalVariables.username) {
	      startX = globalVariables.screenWidth / 2 + (numOfCardsPlayed + 3) * globalVariables.scaledCardWidth / 8 - constants.MAKER_ICON_SIZE / 2;
	      startY = globalVariables.screenHeight - 2 * globalVariables.scaledCardHeight - 2 * constants.MARGIN - constants.MAKER_ICON_SIZE / 2;
	    } else if (usernameWithLargestCardsForCurrentRound === globalVariables.player1Username.text) {
	      startX = globalVariables.screenWidth - 2 * constants.MARGIN - constants.AVATAR_SIZE - constants.MAKER_ICON_SIZE / 2;
	      startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2 - constants.MAKER_ICON_SIZE / 2;
	    } else if (usernameWithLargestCardsForCurrentRound === globalVariables.player2Username.text) {
	      startX = globalVariables.screenWidth / 2 + (numOfCardsPlayed + 3) * globalVariables.scaledCardWidth / 8 - constants.MAKER_ICON_SIZE / 2;
	      startY = 2 * constants.MARGIN + constants.AVATAR_SIZE - constants.MAKER_ICON_SIZE / 2;
	    } else if (usernameWithLargestCardsForCurrentRound === globalVariables.player3Username.text) {
	      startX = (numOfCardsPlayed + 3) * globalVariables.scaledCardWidth / 4 + 2 * constants.MARGIN + constants.AVATAR_SIZE - constants.MAKER_ICON_SIZE / 2;
	      startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2 - constants.MAKER_ICON_SIZE / 2;
	    }
	    globalVariables.bigSign = game.add.sprite(startX, startY, 'big');
	    globalVariables.bigSign.width = constants.MAKER_ICON_SIZE;
	    return globalVariables.bigSign.height = constants.MAKER_ICON_SIZE;
	  };


	  /*
	  Show played cards or historically played cards as sprites for specific player
	  @param: n                               player index
	  @param: valuesOfPlayedCards             values of played cards or historically played cards
	  @param: isCurrentRound                  boolean value:
	                                          - true: the played cards is for current round
	                                          - false: the played cards is for historical round
	   */

	  showPlayedCardsForUser = function(n, valuesOfPlayedCards, isCurrentRound) {
	    var i, j, playedCard, ref, results, startX, startY, userPlayedCards;
	    startX = null;
	    startY = null;
	    userPlayedCards = null;
	    switch (n) {
	      case 0:
	        startX = globalVariables.screenWidth / 2 - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 8;
	        startY = globalVariables.screenHeight - 2 * globalVariables.scaledCardHeight - 2 * constants.MARGIN;
	        if (isCurrentRound) {
	          userPlayedCards = globalVariables.currentUserPlayedCards;
	        } else {
	          userPlayedCards = globalVariables.meHistoricalPlayedCardGroupForOneRound;
	        }
	        break;
	      case 1:
	        startX = globalVariables.screenWidth - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 4 - 2 * constants.MARGIN - constants.AVATAR_SIZE;
	        startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2;
	        if (isCurrentRound) {
	          userPlayedCards = globalVariables.user1PlayedCards;
	        } else {
	          userPlayedCards = globalVariables.player1HistoricalPlayedCardGroupForOneRound;
	        }
	        break;
	      case 2:
	        startX = globalVariables.screenWidth / 2 - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 8;
	        startY = 2 * constants.MARGIN + constants.AVATAR_SIZE;
	        if (isCurrentRound) {
	          userPlayedCards = globalVariables.user2PlayedCards;
	        } else {
	          userPlayedCards = globalVariables.player2HistoricalPlayedCardGroupForOneRound;
	        }
	        break;
	      case 3:
	        startX = 2 * constants.MARGIN + constants.AVATAR_SIZE;
	        startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2;
	        if (isCurrentRound) {
	          userPlayedCards = globalVariables.user3PlayedCards;
	        } else {
	          userPlayedCards = globalVariables.player3HistoricalPlayedCardGroupForOneRound;
	        }
	    }
	    userPlayedCards.removeAll();
	    results = [];
	    for (i = j = 0, ref = valuesOfPlayedCards.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      playedCard = userPlayedCards.create(startX + i * globalVariables.scaledCardWidth / 4, startY, toolbox.getCardName(valuesOfPlayedCards[i]));
	      playedCard.width = globalVariables.scaledCardWidth;
	      results.push(playedCard.height = globalVariables.scaledCardHeight);
	    }
	    return results;
	  };

	  sendGetReadyMessage = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    globalVariables.meStatusText.text = 'Ready';
	    return io.socket.post('/get_ready', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        globalVariables.prepareButton.visible = false;
	        return globalVariables.leaveButton.visible = false;
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  showCoveredCards = function() {
	    var cardName, coveredCard, coveredCardsStage, i, j, ref, stageHeight, stageWidth;
	    if (!globalVariables.isShowingCoveredCards) {
	      stageWidth = 11 * globalVariables.scaledCardWidth / 4 + 2 * constants.MARGIN;
	      stageHeight = globalVariables.scaledCardHeight + 2 * constants.MARGIN;
	      coveredCardsStage = globalVariables.coveredCards.create(globalVariables.screenWidth / 2 - stageWidth / 2, globalVariables.screenHeight / 2 - stageHeight / 2, 'stageBackground');
	      coveredCardsStage.alpha = 0.3;
	      coveredCardsStage.width = stageWidth;
	      coveredCardsStage.height = stageHeight;
	      for (i = j = 0, ref = globalVariables.coveredCards.indexes.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        cardName = toolbox.getCardName(globalVariables.coveredCards.indexes[i]);
	        coveredCard = globalVariables.coveredCards.create(coveredCardsStage.x + constants.MARGIN + i * globalVariables.scaledCardWidth / 4, coveredCardsStage.y + constants.MARGIN, cardName);
	        coveredCard.scale.setTo(globalVariables.scaleWidthRatio, globalVariables.scaleHeightRatio);
	      }
	      return globalVariables.isShowingCoveredCards = true;
	    }
	  };

	  tapUp = function(sprite, pointer) {
	    var i, j, k, l, m, ref, ref1, ref2, ref3, ref4, ref5, selectedCardValues;
	    if (pointer.x >= globalVariables.cardsAtHand.children[0].x && pointer.x <= (globalVariables.cardsAtHand.children[globalVariables.cardsAtHand.children.length - 1].x + globalVariables.cardsAtHand.children[globalVariables.cardsAtHand.children.length - 1].width) && pointer.y >= globalVariables.cardsAtHand.children[0].y && pointer.y <= (globalVariables.cardsAtHand.children[0].y + globalVariables.cardsAtHand.children[0].height)) {
	      globalVariables.endSwipeCardIndex = -1;
	      for (i = j = 0, ref = globalVariables.cardsAtHand.children.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	        if (pointer.x >= globalVariables.cardsAtHand.children[i].x && pointer.x <= globalVariables.cardsAtHand.children[i + 1].x) {
	          globalVariables.endSwipeCardIndex = i;
	          break;
	        }
	      }
	      if (globalVariables.endSwipeCardIndex === -1) {
	        globalVariables.endSwipeCardIndex = globalVariables.cardsAtHand.children.length - 1;
	      }
	      if (globalVariables.startSwipeCardIndex <= globalVariables.endSwipeCardIndex) {
	        for (i = k = ref1 = globalVariables.startSwipeCardIndex, ref2 = globalVariables.endSwipeCardIndex + 1; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
	          toggleCardSelection(globalVariables.cardsAtHand.children[i]);
	        }
	      } else {
	        for (i = l = ref3 = globalVariables.endSwipeCardIndex, ref4 = globalVariables.startSwipeCardIndex + 1; ref3 <= ref4 ? l < ref4 : l > ref4; i = ref3 <= ref4 ? ++l : --l) {
	          toggleCardSelection(globalVariables.cardsAtHand.children[i]);
	        }
	      }
	      selectedCardValues = [];
	      for (i = m = 0, ref5 = globalVariables.cardsAtHand.children.length; 0 <= ref5 ? m < ref5 : m > ref5; i = 0 <= ref5 ? ++m : --m) {
	        if (globalVariables.cardsAtHand.children[i].isSelected) {
	          selectedCardValues.push(globalVariables.cardsAtHand.children[i].value);
	        }
	      }
	      if (globalVariables.gameStatus === constants.GAME_STATUS_SETTLING_COVERED_CARDS) {
	        if (selectedCardValues.length === 8) {
	          globalVariables.settleCoveredCardsButton.inputEnabled = true;
	          return globalVariables.settleCoveredCardsButton.setFrames(1, 0, 1);
	        } else {
	          globalVariables.settleCoveredCardsButton.inputEnabled = false;
	          return globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	        }
	      } else if (globalVariables.gameStatus === constants.GAME_STATUS_PLAYING) {
	        if (toolbox.validateSelectedCardsForPlay(selectedCardValues, globalVariables.firstlyPlayedCardValuesForCurrentRound, globalVariables.cardsAtHand.values, globalVariables.mainSuit, globalVariables.cardValueRanks)) {
	          globalVariables.playCardsButton.inputEnabled = true;
	          return globalVariables.playCardsButton.setFrames(1, 0, 1);
	        } else {
	          globalVariables.playCardsButton.inputEnabled = false;
	          return globalVariables.playCardsButton.setFrames(2, 2, 2);
	        }
	      }
	    }
	  };

	  tapDownOnSprite = function(sprite, pointer) {
	    return globalVariables.startSwipeCardIndex = sprite.index;
	  };

	  hideLeftPlayer = function(username) {
	    if (globalVariables.player1Username) {
	      if (username === globalVariables.player1Username.text) {
	        globalVariables.user1Avatar.destroy();
	        globalVariables.player1Username.destroy();
	        globalVariables.player1IsMakerIcon.destroy();
	        globalVariables.player1StatusText.destroy();
	      }
	    }
	    if (globalVariables.player2Username) {
	      if (username === globalVariables.player2Username.text) {
	        globalVariables.user2Avatar.destroy();
	        globalVariables.player2Username.destroy();
	        globalVariables.player2IsMakerIcon.destroy();
	        globalVariables.player2StatusText.destroy();
	      }
	    }
	    if (globalVariables.player3Username) {
	      if (username === globalVariables.player3Username.text) {
	        globalVariables.user3Avatar.destroy();
	        globalVariables.player3Username.destroy();
	        globalVariables.player3IsMakerIcon.destroy();
	        return globalVariables.player3StatusText.destroy();
	      }
	    }
	  };

	  backgroundTapped = function() {
	    var i, j, k, l, ref, ref1, spritesShouldBeRemoved;
	    if (globalVariables.isShowingCoveredCards) {
	      spritesShouldBeRemoved = [];
	      for (i = j = 1; j < 10; i = ++j) {
	        spritesShouldBeRemoved.push(globalVariables.coveredCards.children[i]);
	      }
	      for (i = k = 0, ref = spritesShouldBeRemoved.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
	        globalVariables.coveredCards.remove(spritesShouldBeRemoved[i]);
	      }
	      globalVariables.isShowingCoveredCards = false;
	    } else {
	      for (i = l = 0, ref1 = globalVariables.cardsAtHand.children.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
	        if (globalVariables.cardsAtHand.children[i].isSelected) {
	          toggleCardSelection(globalVariables.cardsAtHand.children[i]);
	        }
	      }
	    }
	    if (globalVariables.gameStatus === constants.GAME_STATUS_PLAYING) {
	      globalVariables.playCardsButton.inputEnabled = false;
	      globalVariables.playCardsButton.setFrames(2, 2, 2);
	    }
	    if (globalVariables.gameStatus === constants.GAME_STATUS_SETTLING_COVERED_CARDS) {
	      globalVariables.settleCoveredCardsButton.inputEnabled = false;
	      return globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	    }
	  };

	  playSelectedCards = function() {
	    var csrfToken, i, j, ref, selectedCards, valuesOfCurrentUserPlayedCards;
	    selectedCards = [];
	    valuesOfCurrentUserPlayedCards = [];
	    globalVariables.playCardsButton.inputEnabled = false;
	    globalVariables.playCardsButton.setFrames(2, 2, 2);
	    globalVariables.playCardsButton.visible = false;
	    for (i = j = 0, ref = globalVariables.cardsAtHand.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (globalVariables.cardsAtHand.children[i].isSelected) {
	        selectedCards.push(globalVariables.cardsAtHand.children[i]);
	        valuesOfCurrentUserPlayedCards.push(globalVariables.cardsAtHand.children[i].value);
	      }
	    }
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/play_cards', {
	      playedCardValues: valuesOfCurrentUserPlayedCards,
	      roomName: globalVariables.roomName,
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      var index, k, l, leftMargin, numOfCardsLeft, ref1, ref2;
	      if (jwres.statusCode === 200) {
	        for (i = k = 0, ref1 = selectedCards.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	          globalVariables.cardsAtHand.remove(selectedCards[i]);
	          index = globalVariables.cardsAtHand.values.indexOf(selectedCards[i].value);
	          globalVariables.cardsAtHand.values.splice(index, 1);
	        }
	        numOfCardsLeft = globalVariables.cardsAtHand.children.length;
	        leftMargin = (globalVariables.screenWidth - (Math.floor(globalVariables.scaledCardWidth / 4) * numOfCardsLeft + Math.floor(3 * globalVariables.scaledCardWidth / 4))) / 2;
	        for (i = l = 0, ref2 = globalVariables.cardsAtHand.children.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	          globalVariables.cardsAtHand.children[i].x = leftMargin + i * Math.floor(globalVariables.scaledCardWidth / 4);
	          globalVariables.cardsAtHand.children[i].index = i;
	        }
	        return showPlayedCardsForUser(0, valuesOfCurrentUserPlayedCards, true);
	      } else {
	        return console.log(resData);
	      }
	    });
	  };

	  showPlayer1Info = function(game, username) {
	    globalVariables.user1Avatar = game.add.sprite(globalVariables.screenWidth - constants.AVATAR_SIZE - constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'avatar');
	    globalVariables.user1Avatar.width /= 2;
	    globalVariables.user1Avatar.height /= 2;
	    globalVariables.player1IsMakerIcon = game.add.sprite(globalVariables.screenWidth - constants.AVATAR_SIZE - constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'makerIcon');
	    globalVariables.player1IsMakerIcon.width = constants.MAKER_ICON_SIZE;
	    globalVariables.player1IsMakerIcon.height = constants.MAKER_ICON_SIZE;
	    globalVariables.player1IsMakerIcon.visible = false;
	    globalVariables.player1Username = game.add.text(globalVariables.screenWidth - constants.AVATAR_SIZE - constants.MARGIN, game.world.centerY + constants.AVATAR_SIZE / 2 + constants.MARGIN, username, constants.TEXT_STYLE);
	    return globalVariables.player1Username.setTextBounds(0, 0, constants.AVATAR_SIZE, 25);
	  };

	  showPlayer2Info = function(game, username) {
	    globalVariables.user2Avatar = game.add.sprite(game.world.centerX - constants.AVATAR_SIZE / 2, constants.MARGIN, 'avatar');
	    globalVariables.user2Avatar.width /= 2;
	    globalVariables.user2Avatar.height /= 2;
	    globalVariables.player2IsMakerIcon = game.add.sprite(game.world.centerX - constants.AVATAR_SIZE / 2, constants.MARGIN, 'makerIcon');
	    globalVariables.player2IsMakerIcon.width = constants.MAKER_ICON_SIZE;
	    globalVariables.player2IsMakerIcon.height = constants.MAKER_ICON_SIZE;
	    globalVariables.player2IsMakerIcon.visible = false;
	    globalVariables.player2Username = game.add.text(game.world.centerX - constants.AVATAR_SIZE / 2, constants.AVATAR_SIZE + 2 * constants.MARGIN, username, constants.TEXT_STYLE);
	    return globalVariables.player2Username.setTextBounds(0, 0, constants.AVATAR_SIZE, 25);
	  };

	  showPlayer3Info = function(game, username) {
	    globalVariables.user3Avatar = game.add.sprite(constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'avatar');
	    globalVariables.user3Avatar.width /= 2;
	    globalVariables.user3Avatar.height /= 2;
	    globalVariables.player3IsMakerIcon = game.add.sprite(constants.MARGIN, game.world.centerY - constants.AVATAR_SIZE / 2, 'makerIcon');
	    globalVariables.player3IsMakerIcon.width = constants.MAKER_ICON_SIZE;
	    globalVariables.player3IsMakerIcon.height = constants.MAKER_ICON_SIZE;
	    globalVariables.player3IsMakerIcon.visible = false;
	    globalVariables.player3Username = game.add.text(constants.MARGIN, game.world.centerY + constants.AVATAR_SIZE / 2 + constants.MARGIN, username, constants.TEXT_STYLE);
	    return globalVariables.player3Username.setTextBounds(0, 0, constants.AVATAR_SIZE, 25);
	  };

	  raiseScore = function() {
	    var aimedScores, currentSetScores;
	    aimedScores = parseInt(globalVariables.textOfAimedScores.text);
	    currentSetScores = parseInt(globalVariables.callScoreStage.children[2].text);
	    if (currentSetScores < (aimedScores - 5)) {
	      currentSetScores += 5;
	      return globalVariables.callScoreStage.children[2].text = '' + currentSetScores;
	    }
	  };

	  showCallScorePanel = function(game, currentScore) {
	    var background, currentScoreText, lowerScoreButton, passButton, raiseScoreButton, setScoreButton, stageHeight, stageWidth;
	    globalVariables.callScoreStage = game.add.group();
	    stageWidth = 11 * globalVariables.scaledCardWidth / 4 + 2 * constants.MARGIN;
	    stageHeight = globalVariables.scaledCardHeight + 2 * constants.MARGIN;
	    background = globalVariables.callScoreStage.create(globalVariables.screenWidth / 2 - stageWidth / 2, globalVariables.screenHeight / 2 - stageHeight / 2, 'stageBackground');
	    background.alpha = 0.3;
	    background.width = stageWidth;
	    background.height = stageHeight;
	    raiseScoreButton = game.add.button(game.world.centerX - constants.ROUND_BUTTON_SIZE / 2 - constants.ROUND_BUTTON_SIZE - constants.MARGIN, game.world.centerY - stageHeight / 2 + constants.MARGIN, 'raiseScoreButton', raiseScore, this, 1, 0, 1, 0);
	    globalVariables.callScoreStage.add(raiseScoreButton);
	    currentScoreText = game.add.text(game.world.centerX - constants.ROUND_BUTTON_SIZE / 2, game.world.centerY - stageHeight / 2 + constants.MARGIN, '' + currentScore - 5, constants.LARGE_TEXT_STYLE);
	    currentScoreText.setTextBounds(0, 0, constants.ROUND_BUTTON_SIZE, constants.ROUND_BUTTON_SIZE);
	    globalVariables.callScoreStage.add(currentScoreText);
	    lowerScoreButton = game.add.button(game.world.centerX + constants.ROUND_BUTTON_SIZE / 2 + constants.MARGIN, game.world.centerY - stageHeight / 2 + constants.MARGIN, 'lowerScoreButton', lowerScore, this, 1, 0, 1);
	    globalVariables.callScoreStage.add(lowerScoreButton);
	    setScoreButton = game.add.button(game.world.centerX - constants.BUTTON_WIDTH - constants.MARGIN / 2, game.world.centerY + constants.ROUND_BUTTON_SIZE / 2, 'setScoreButton', setScore, this, 1, 0, 1);
	    globalVariables.callScoreStage.add(setScoreButton);
	    passButton = game.add.button(game.world.centerX + constants.MARGIN / 2, game.world.centerY + constants.ROUND_BUTTON_SIZE / 2, 'passButton', pass, this, 1, 0, 1, 0);
	    return globalVariables.callScoreStage.add(passButton);
	  };

	  setScore = function() {
	    var aimedScore, csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    aimedScore = parseInt(globalVariables.callScoreStage.children[2].text);
	    return io.socket.post('/set_score', {
	      score: aimedScore,
	      roomName: globalVariables.roomName,
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        globalVariables.callScoreStage.destroy(true, false);
	        return globalVariables.meStatusText.text = '' + aimedScore;
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  lowerScore = function() {
	    var aimedScores, currentSetScores;
	    aimedScores = parseInt(globalVariables.textOfAimedScores.text);
	    currentSetScores = parseInt(globalVariables.callScoreStage.children[2].text);
	    if (currentSetScores > 5) {
	      currentSetScores -= 5;
	      return globalVariables.callScoreStage.children[2].text = '' + currentSetScores;
	    }
	  };

	  pass = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    globalVariables.meStatusText.text = '不要';
	    return io.socket.post('/pass', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken,
	      username: globalVariables.username,
	      roomName: globalVariables.roomName
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        return globalVariables.callScoreStage.destroy(true, false);
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  surrender = function() {
	    return endGame(true);
	  };

	  settleCoveredCards = function() {
	    var coveredCardsIcon, csrfToken, i, index, j, k, ref, ref1, valuesOfSelectedCoveredCards;
	    valuesOfSelectedCoveredCards = [];
	    for (i = j = 0, ref = globalVariables.cardsAtHand.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      if (globalVariables.cardsAtHand.children[i].isSelected) {
	        valuesOfSelectedCoveredCards.push(globalVariables.cardsAtHand.children[i].value);
	      }
	    }
	    if (valuesOfSelectedCoveredCards.length !== 8) {
	      return;
	    }
	    for (i = k = 0, ref1 = valuesOfSelectedCoveredCards.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      index = globalVariables.cardsAtHand.values.indexOf(valuesOfSelectedCoveredCards[i]);
	      globalVariables.cardsAtHand.values.splice(index, 1);
	    }
	    displayCards(globalVariables.cardsAtHand.values);
	    coveredCardsIcon = globalVariables.coveredCards.create(constants.MARGIN, constants.MARGIN, 'back');
	    coveredCardsIcon.scale.setTo(globalVariables.scaleWidthRatio, globalVariables.scaleHeightRatio);
	    coveredCardsIcon.inputEnabled = true;
	    globalVariables.coveredCards.indexes = valuesOfSelectedCoveredCards;
	    coveredCardsIcon.events.onInputDown.add(showCoveredCards, this);
	    globalVariables.settleCoveredCardsButton.visible = false;
	    globalVariables.settleCoveredCardsButton.inputEnabled = false;
	    globalVariables.settleCoveredCardsButton.setFrames(2, 2, 2);
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/settleCoveredCards', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken,
	      roomName: globalVariables.roomName,
	      coveredCards: globalVariables.coveredCards.indexes,
	      maker: globalVariables.username,
	      cardsAtHand: globalVariables.cardsAtHand.values
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        return showSelectSuitPanel();
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  showSelectSuitPanel = function() {
	    var background, clubIcon, diamondIcon, heartIcon, rectangle, spadeIcon, stageHeight, stageWidth;
	    globalVariables.gameStatus = constants.GAME_STATUS_DECIDING_SUIT;
	    globalVariables.selectSuitButton.visible = true;
	    globalVariables.selectSuitButton.inputEnabled = false;
	    globalVariables.selectSuitButton.setFrames(2, 2, 2);
	    stageWidth = 4 * constants.SUIT_ICON_SIZE + 8 * constants.MARGIN;
	    stageHeight = 2 * constants.MARGIN + constants.SUIT_ICON_SIZE;
	    background = globalVariables.selectSuitStage.create(globalVariables.screenWidth / 2 - stageWidth / 2, globalVariables.screenHeight / 2 - stageHeight / 2, 'stageBackground');
	    background.alpha = 0.3;
	    background.width = stageWidth;
	    background.height = stageHeight;
	    globalVariables.selectSuitStage.add(background);
	    spadeIcon = globalVariables.selectSuitStage.create(background.x + (1 + 2 * 0) * constants.MARGIN + 0 * constants.SUIT_ICON_SIZE, background.y + constants.MARGIN, 'spade');
	    spadeIcon.width = constants.SUIT_ICON_SIZE;
	    spadeIcon.height = constants.SUIT_ICON_SIZE;
	    spadeIcon.inputEnabled = true;
	    spadeIcon.input.useHandCursor = true;
	    spadeIcon.events.onInputDown.add(function() {
	      return suitTapEffect(1);
	    }, this);
	    globalVariables.selectSuitStage.add(spadeIcon);
	    heartIcon = globalVariables.selectSuitStage.create(background.x + (1 + 2 * 1) * constants.MARGIN + 1 * constants.SUIT_ICON_SIZE, background.y + constants.MARGIN, 'heart');
	    heartIcon.width = constants.SUIT_ICON_SIZE;
	    heartIcon.height = constants.SUIT_ICON_SIZE;
	    heartIcon.inputEnabled = true;
	    heartIcon.input.useHandCursor = true;
	    heartIcon.events.onInputDown.add(function() {
	      return suitTapEffect(2);
	    }, this);
	    globalVariables.selectSuitStage.add(heartIcon);
	    clubIcon = globalVariables.selectSuitStage.create(background.x + (1 + 2 * 2) * constants.MARGIN + 2 * constants.SUIT_ICON_SIZE, background.y + constants.MARGIN, 'club');
	    clubIcon.width = constants.SUIT_ICON_SIZE;
	    clubIcon.height = constants.SUIT_ICON_SIZE;
	    clubIcon.inputEnabled = true;
	    clubIcon.input.useHandCursor = true;
	    clubIcon.events.onInputDown.add(function() {
	      return suitTapEffect(3);
	    }, this);
	    globalVariables.selectSuitStage.add(clubIcon);
	    diamondIcon = globalVariables.selectSuitStage.create(background.x + (1 + 2 * 3) * constants.MARGIN + 3 * constants.SUIT_ICON_SIZE, background.y + constants.MARGIN, 'diamond');
	    diamondIcon.width = constants.SUIT_ICON_SIZE;
	    diamondIcon.height = constants.SUIT_ICON_SIZE;
	    diamondIcon.inputEnabled = true;
	    diamondIcon.input.useHandCursor = true;
	    diamondIcon.events.onInputDown.add(function() {
	      return suitTapEffect(4);
	    }, this);
	    globalVariables.selectSuitStage.add(diamondIcon);
	    rectangle = globalVariables.selectSuitStage.create(spadeIcon.x, spadeIcon.y, 'rectangle');
	    rectangle.width = constants.SUIT_ICON_SIZE + 10;
	    rectangle.height = constants.SUIT_ICON_SIZE + 10;
	    rectangle.visible = false;
	    return globalVariables.selectSuitStage.add(rectangle);
	  };

	  selectSuit = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/chooseMainSuit', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken,
	      roomName: globalVariables.roomName,
	      maker: globalVariables.username,
	      mainSuit: globalVariables.mainSuit
	    }, function(resData, jwres) {
	      var i, j, k, ref, ref1, spritesShouldBeRemoved;
	      if (jwres.statusCode === 200) {
	        globalVariables.surrenderButton.visible = false;
	        globalVariables.selectSuitButton.visible = false;
	        spritesShouldBeRemoved = [];
	        for (i = j = 0, ref = globalVariables.selectSuitStage.children.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	          spritesShouldBeRemoved.push(globalVariables.selectSuitStage.children[i]);
	        }
	        for (i = k = 0, ref1 = spritesShouldBeRemoved.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	          globalVariables.selectSuitStage.remove(spritesShouldBeRemoved[i]);
	        }
	        globalVariables.iconOfMainSuit.frame = globalVariables.mainSuit;
	        globalVariables.playCardsButton.visible = true;
	        globalVariables.playCardsButton.inputEnabled = false;
	        globalVariables.playCardsButton.setFrames(2, 2, 2);
	        return globalVariables.gameStatus = constants.GAME_STATUS_PLAYING;
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  suitTapEffect = function(suitIndex) {
	    var rectangle, suitIcon;
	    globalVariables.mainSuit = suitIndex;
	    rectangle = globalVariables.selectSuitStage.children[globalVariables.selectSuitStage.children.length - 1];
	    suitIcon = globalVariables.selectSuitStage.children[suitIndex];
	    rectangle.x = suitIcon.x - 5;
	    rectangle.y = suitIcon.y - 5;
	    rectangle.visible = true;
	    globalVariables.selectSuitButton.inputEnabled = true;
	    return globalVariables.selectSuitButton.setFrames(1, 0, 1);
	  };

	  leaveRoom = function() {
	    var csrfToken;
	    csrfToken = document.getElementsByName('csrf-token')[0].content;
	    return io.socket.post('/leave_room', {
	      _csrf: csrfToken,
	      userId: globalVariables.userId,
	      loginToken: globalVariables.loginToken
	    }, function(resData, jwres) {
	      if (jwres.statusCode === 200) {
	        return window.location.href = '/';
	      } else {
	        return alert(resData);
	      }
	    });
	  };

	  showHistoricallyPlayedCards = function(game) {
	    var background, lastRoundButton, nextRoundButton;
	    if (globalVariables.playCardsButton.visible === true) {
	      globalVariables.isPlayCardButtonVisibleBeforeShowingHistoricalRecordStage = true;
	      globalVariables.playCardsButton.visible = false;
	    } else {
	      globalVariables.isPlayCardButtonVisibleBeforeShowingHistoricalRecordStage = false;
	    }
	    globalVariables.historicalButton.visible = false;
	    globalVariables.historicalRecordStage = game.add.group();
	    background = globalVariables.historicalRecordStage.create(0, 0, 'stageBackground');
	    background.alpha = 0.3;
	    background.width = globalVariables.screenWidth;
	    background.height = globalVariables.screenHeight;
	    background.inputEnabled = true;
	    background.events.onInputDown.add(hideHistoricalRecordStage, this);
	    globalVariables.historicalRecordStage.add(background);
	    lastRoundButton = game.add.button(globalVariables.screenWidth - 2 * constants.MARGIN - constants.BUTTON_WIDTH - constants.AVATAR_SIZE, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET, 'lastRound', showLastRoundPlayedCards, this, 1, 0, 1);
	    globalVariables.historicalRecordStage.add(lastRoundButton);
	    nextRoundButton = game.add.button(globalVariables.screenWidth - 2 * constants.MARGIN - constants.BUTTON_WIDTH - constants.AVATAR_SIZE, globalVariables.screenHeight - globalVariables.scaledCardHeight - constants.BUTTON_HEIGHT - 2 * constants.MARGIN - constants.SELECTED_CARD_Y_OFFSET + constants.MARGIN + constants.BUTTON_HEIGHT, 'nextRound', showNextRoundPlayedCards, this, 1, 0, 1);
	    globalVariables.historicalRecordStage.add(nextRoundButton);
	    globalVariables.historicalRoundIndex = globalVariables.meHistoricalPlayedCardValues.length;
	    return showLastRoundPlayedCards();
	  };

	  hideHistoricalRecordStage = function() {
	    if (globalVariables.isPlayCardButtonVisibleBeforeShowingHistoricalRecordStage === true) {
	      globalVariables.playCardsButton.visible = true;
	    }
	    globalVariables.historicalRecordStage.destroy(true, false);
	    globalVariables.historicalButton.visible = true;
	    globalVariables.meHistoricalPlayedCardGroupForOneRound.removeAll();
	    globalVariables.player1HistoricalPlayedCardGroupForOneRound.removeAll();
	    globalVariables.player2HistoricalPlayedCardGroupForOneRound.removeAll();
	    return globalVariables.player3HistoricalPlayedCardGroupForOneRound.removeAll();
	  };

	  toggleLastAndNextRoundButton = function() {
	    if (globalVariables.meHistoricalPlayedCardValues.length === 1) {
	      globalVariables.historicalRecordStage.children[1].inputEnabled = false;
	      globalVariables.historicalRecordStage.children[1].setFrames(2, 2, 2);
	      globalVariables.historicalRecordStage.children[2].inputEnabled = false;
	      return globalVariables.historicalRecordStage.children[2].setFrames(2, 2, 2);
	    } else if (globalVariables.historicalRoundIndex === 0) {
	      globalVariables.historicalRecordStage.children[1].inputEnabled = false;
	      globalVariables.historicalRecordStage.children[1].setFrames(2, 2, 2);
	      globalVariables.historicalRecordStage.children[2].inputEnabled = true;
	      return globalVariables.historicalRecordStage.children[2].setFrames(1, 0, 1);
	    } else if (globalVariables.historicalRoundIndex === (globalVariables.meHistoricalPlayedCardValues.length - 1)) {
	      globalVariables.historicalRecordStage.children[1].inputEnabled = true;
	      globalVariables.historicalRecordStage.children[1].setFrames(1, 0, 1);
	      globalVariables.historicalRecordStage.children[2].inputEnabled = false;
	      return globalVariables.historicalRecordStage.children[2].setFrames(2, 2, 2);
	    } else {
	      globalVariables.historicalRecordStage.children[1].inputEnabled = true;
	      globalVariables.historicalRecordStage.children[1].setFrames(1, 0, 1);
	      globalVariables.historicalRecordStage.children[2].inputEnabled = true;
	      return globalVariables.historicalRecordStage.children[2].setFrames(1, 0, 1);
	    }
	  };

	  showLastRoundPlayedCards = function() {
	    if (globalVariables.historicalRoundIndex === 0) {
	      return;
	    }
	    globalVariables.historicalRoundIndex -= 1;
	    toggleLastAndNextRoundButton();
	    showPlayedCardsForUser(0, globalVariables.meHistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	    showPlayedCardsForUser(1, globalVariables.player1HistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	    showPlayedCardsForUser(2, globalVariables.player2HistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	    return showPlayedCardsForUser(3, globalVariables.player3HistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	  };

	  showNextRoundPlayedCards = function() {
	    if (globalVariables.historicalRoundIndex === globalVariables.meHistoricalPlayedCardValues.length - 1) {
	      return;
	    }
	    globalVariables.historicalRoundIndex += 1;
	    toggleLastAndNextRoundButton();
	    showPlayedCardsForUser(0, globalVariables.meHistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	    showPlayedCardsForUser(1, globalVariables.player1HistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	    showPlayedCardsForUser(2, globalVariables.player2HistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	    return showPlayedCardsForUser(3, globalVariables.player3HistoricalPlayedCardValues[globalVariables.historicalRoundIndex], false);
	  };

	  endGame = function(isSurrender) {
	    var csrfToken;
	    if (isSurrender) {
	      csrfToken = document.getElementsByName('csrf-token')[0].content;
	      return io.socket.post('/surrender', {
	        _csrf: csrfToken,
	        userId: globalVariables.userId,
	        loginToken: globalVariables.loginToken
	      }, function(resData, jwres) {
	        if (jwres.statusCode === 200) {
	          return console.log(resData);
	        } else {
	          return alert(resData);
	        }
	      });
	    }
	  };

	  module.exports = {
	    toggleCardSelection: toggleCardSelection,
	    displayCards: displayCards,
	    showCoveredCards: showCoveredCards,
	    showPlayedCardsForUser: showPlayedCardsForUser,
	    tapUp: tapUp,
	    tapDownOnSprite: tapDownOnSprite,
	    backgroundTapped: backgroundTapped,
	    playSelectedCards: playSelectedCards,
	    showPlayer1Info: showPlayer1Info,
	    showPlayer2Info: showPlayer2Info,
	    showPlayer3Info: showPlayer3Info,
	    hideLeftPlayer: hideLeftPlayer,
	    showCallScorePanel: showCallScorePanel,
	    raiseScore: raiseScore,
	    lowerScore: lowerScore,
	    pass: pass,
	    surrender: surrender,
	    settleCoveredCards: settleCoveredCards,
	    showSelectSuitPanel: showSelectSuitPanel,
	    setScore: setScore,
	    selectSuit: selectSuit,
	    leaveRoom: leaveRoom,
	    sendGetReadyMessage: sendGetReadyMessage,
	    showBigStampForTheLargestPlayedCardsCurrentRound: showBigStampForTheLargestPlayedCardsCurrentRound,
	    showEarnedScoreTextWithFadeOutEffect: showEarnedScoreTextWithFadeOutEffect,
	    showHistoricallyPlayedCards: showHistoricallyPlayedCards,
	    endGame: endGame
	  };

	}).call(this);


/***/ }
/******/ ]);