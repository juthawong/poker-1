// Generated by CoffeeScript 1.10.0
(function() {
  var constants, getAllPairValuesAtHandForSuit, getAllValuesOfMainAndMainSuit, getCardName, getCardValuesForSuit, getRanksForMainSuitCards, getRelativeMainSuitValues, getStartAndEndValueForSuit, globalVariables, havePairForMainSuit, havePairForSuit, haveSingleForMainSuit, haveSingleForSuit, haveTractorForMainSuit, haveTractorForSuit, isPairForMainSuit, isPairForSuit, isSingleForMainSuit, isSingleForSuit, isTractorForMainSuit, isTractorForSuit, sortCards, validateSelectedCardsForPlay,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  constants = require('./constants.js');

  globalVariables = require('./globalVariables.js');

  sortCards = function(array) {
    var sortNumber;
    sortNumber = function(a, b) {
      return a - b;
    };
    return array.sort(sortNumber);
  };


  /*
  With the given card value, this function finds out its corresponding card name
  @param n:                           the card value
  @return string:                     the corresponding card value
   */

  getCardName = function(n) {
    var cardName;
    cardName = '';
    switch (n) {
      case 1:
        cardName = 'bigJoker';
        break;
      case 2:
        cardName = 'smallJoker';
        break;
      case 3:
        cardName = 'sevenOfSpades';
        break;
      case 4:
        cardName = 'sevenOfHearts';
        break;
      case 5:
        cardName = 'sevenOfClubs';
        break;
      case 6:
        cardName = 'sevenOfDiamonds';
        break;
      case 7:
        cardName = 'twoOfSpades';
        break;
      case 8:
        cardName = 'twoOfHearts';
        break;
      case 9:
        cardName = 'twoOfClubs';
        break;
      case 10:
        cardName = 'twoOfDiamonds';
        break;
      case 11:
        cardName = 'aceOfSpades';
        break;
      case 12:
        cardName = 'kingOfSpades';
        break;
      case 13:
        cardName = 'queenOfSpades';
        break;
      case 14:
        cardName = 'jackOfSpades';
        break;
      case 15:
        cardName = 'tenOfSpades';
        break;
      case 16:
        cardName = 'nineOfSpades';
        break;
      case 17:
        cardName = 'eightOfSpades';
        break;
      case 18:
        cardName = 'sixOfSpades';
        break;
      case 19:
        cardName = 'fiveOfSpades';
        break;
      case 20:
        cardName = 'aceOfHearts';
        break;
      case 21:
        cardName = 'kingOfHearts';
        break;
      case 22:
        cardName = 'queenOfHearts';
        break;
      case 23:
        cardName = 'jackOfHearts';
        break;
      case 24:
        cardName = 'tenOfHearts';
        break;
      case 25:
        cardName = 'nineOfHearts';
        break;
      case 26:
        cardName = 'eightOfHearts';
        break;
      case 27:
        cardName = 'sixOfHearts';
        break;
      case 28:
        cardName = 'fiveOfHearts';
        break;
      case 29:
        cardName = 'aceOfClubs';
        break;
      case 30:
        cardName = 'kingOfClubs';
        break;
      case 31:
        cardName = 'queenOfClubs';
        break;
      case 32:
        cardName = 'jackOfClubs';
        break;
      case 33:
        cardName = 'tenOfClubs';
        break;
      case 34:
        cardName = 'nineOfClubs';
        break;
      case 35:
        cardName = 'eightOfClubs';
        break;
      case 36:
        cardName = 'sixOfClubs';
        break;
      case 37:
        cardName = 'fiveOfClubs';
        break;
      case 38:
        cardName = 'aceOfDiamonds';
        break;
      case 39:
        cardName = 'kingOfDiamonds';
        break;
      case 40:
        cardName = 'queenOfDiamonds';
        break;
      case 41:
        cardName = 'jackOfDiamonds';
        break;
      case 42:
        cardName = 'tenOfDiamonds';
        break;
      case 43:
        cardName = 'nineOfDiamonds';
        break;
      case 44:
        cardName = 'eightOfDiamonds';
        break;
      case 45:
        cardName = 'sixOfDiamonds';
        break;
      case 46:
        cardName = 'fiveOfDiamonds';
    }
    return cardName;
  };


  /*
  Given a suit index, find out the starting card value and ending card value that belongs to that suit
  @param: suitIndex               the suit index
  @return: array                  an array that contains the starting card value and ending card value that belongs to that suit
   */

  getStartAndEndValueForSuit = function(suitIndex) {
    var endCardValueForSuit, startCardValueForSuit;
    startCardValueForSuit = 0;
    endCardValueForSuit = 0;
    switch (suitIndex) {
      case constants.INDEX_SUIT_MAIN:
        startCardValueForSuit = constants.START_VALUE_FOR_MAIN;
        endCardValueForSuit = constants.END_VALUE_FOR_MAIN;
        break;
      case constants.INDEX_SUIT_SPADE:
        startCardValueForSuit = constants.START_VALUE_FOR_SPADE;
        endCardValueForSuit = constants.END_VALUE_FOR_SPADE;
        break;
      case constants.INDEX_SUIT_HEART:
        startCardValueForSuit = constants.START_VALUE_FOR_HEART;
        endCardValueForSuit = constants.END_VALUE_FOR_HEART;
        break;
      case constants.INDEX_SUIT_CLUB:
        startCardValueForSuit = constants.START_VALUE_FOR_CLUB;
        endCardValueForSuit = constants.END_VALUE_FOR_CLUB;
        break;
      case constants.INDEX_SUIT_DIAMOND:
        startCardValueForSuit = constants.START_VALUE_FOR_DIAMOND;
        endCardValueForSuit = constants.END_VALUE_FOR_DIAMOND;
    }
    return [startCardValueForSuit, endCardValueForSuit];
  };


  /*
  With the given main suit index, rank all card values and return a map that contains the ranking information
  @param: mainSuit            the main suit index
  @return: ranks              the map data structure with format like this:
                              {
                                  valueOfCard1: rank1,
                                  valueOfCard2: rank2,
                                  ...
                              }
   */

  getRanksForMainSuitCards = function(mainSuit) {
    var i, j, k, l, m, nonMainSuitCardStartingRank, o, p, q, r, ranks, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, startingRank, t;
    ranks = {};
    ranks[constants.VALUE_BIG_JOKER] = 1;
    ranks[constants.VALUE_SMALL_JOKER] = 2;
    for (i = j = ref = constants.VALUE_SPADE_SEVEN, ref1 = constants.VALUE_DIAMOND_SEVEN + 1; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
      ranks[i] = 4;
    }
    for (i = k = ref2 = constants.VALUE_SPADE_TWO, ref3 = constants.VALUE_DIAMOND_TWO + 1; ref2 <= ref3 ? k < ref3 : k > ref3; i = ref2 <= ref3 ? ++k : --k) {
      ranks[i] = 6;
    }
    nonMainSuitCardStartingRank = 16;
    for (i = l = ref4 = constants.VALUE_SPADE_ACE, ref5 = constants.VALUE_SPADE_FIVE + 1; ref4 <= ref5 ? l < ref5 : l > ref5; i = ref4 <= ref5 ? ++l : --l) {
      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_SPADE_ACE;
    }
    for (i = m = ref6 = constants.VALUE_HEART_ACE, ref7 = constants.VALUE_HEART_FIVE + 1; ref6 <= ref7 ? m < ref7 : m > ref7; i = ref6 <= ref7 ? ++m : --m) {
      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_HEART_ACE;
    }
    for (i = o = ref8 = constants.VALUE_CLUB_ACE, ref9 = constants.VALUE_CLUB_FIVE + 1; ref8 <= ref9 ? o < ref9 : o > ref9; i = ref8 <= ref9 ? ++o : --o) {
      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_CLUB_ACE;
    }
    for (i = p = ref10 = constants.VALUE_DIAMOND_ACE, ref11 = constants.VALUE_DIAMOND_FIVE + 1; ref10 <= ref11 ? p < ref11 : p > ref11; i = ref10 <= ref11 ? ++p : --p) {
      ranks[i] = nonMainSuitCardStartingRank + i - constants.VALUE_DIAMOND_ACE;
    }
    startingRank = 7;
    if (mainSuit === constants.INDEX_SUIT_SPADE) {
      ranks[constants.VALUE_SPADE_SEVEN] = 3;
      ranks[constants.VALUE_SPADE_TWO] = 5;
      for (i = q = ref12 = constants.VALUE_SPADE_ACE, ref13 = constants.VALUE_SPADE_FIVE + 1; ref12 <= ref13 ? q < ref13 : q > ref13; i = ref12 <= ref13 ? ++q : --q) {
        ranks[i] = startingRank + i - constants.VALUE_SPADE_ACE;
      }
    } else if (mainSuit === constants.INDEX_SUIT_HEART) {
      ranks[constants.VALUE_HEART_SEVEN] = 3;
      ranks[constants.VALUE_HEART_TWO] = 5;
      for (i = r = ref14 = constants.VALUE_HEART_ACE, ref15 = constants.VALUE_HEART_FIVE + 1; ref14 <= ref15 ? r < ref15 : r > ref15; i = ref14 <= ref15 ? ++r : --r) {
        ranks[i] = startingRank + i - constants.VALUE_HEART_ACE;
      }
    } else if (mainSuit === constants.INDEX_SUIT_CLUB) {
      ranks[constants.VALUE_CLUB_SEVEN] = 3;
      ranks[constants.VALUE_CLUB_TWO] = 5;
      for (i = s = ref16 = constants.VALUE_CLUB_ACE, ref17 = constants.VALUE_CLUB_FIVE + 1; ref16 <= ref17 ? s < ref17 : s > ref17; i = ref16 <= ref17 ? ++s : --s) {
        ranks[i] = startingRank + i - constants.VALUE_CLUB_ACE;
      }
    } else if (mainSuit === constants.INDEX_SUIT_DIAMOND) {
      ranks[constants.VALUE_DIAMOND_SEVEN] = 3;
      ranks[constants.VALUE_DIAMOND_TWO] = 5;
      for (i = t = ref18 = constants.VALUE_DIAMOND_ACE, ref19 = constants.VALUE_DIAMOND_FIVE + 1; ref18 <= ref19 ? t < ref19 : t > ref19; i = ref18 <= ref19 ? ++t : --t) {
        ranks[i] = startingRank + i - constants.VALUE_DIAMOND_ACE;
      }
    }
    return ranks;
  };


  /*
  Given a array of cards, find out all the card values that belongs to the designated suit
  @param: suitIndex                       the suit index
  @param: cardValues                      the card values in which to look for
  @return: cardValuesForSuit              the card values that belongs to the given suit in the given card values
   */

  getCardValuesForSuit = function(suitIndex, cardValues) {
    var cardValuesForSuit, i, j, ref, startAndEndValuesForSuit;
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    cardValuesForSuit = [];
    for (i = j = 0, ref = cardValues.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (cardValues[i] >= startAndEndValuesForSuit[0] && cardValues[i] <= startAndEndValuesForSuit[1]) {
        cardValuesForSuit.push(cardValues[i]);
      }
    }
    return cardValuesForSuit;
  };


  /*
  Given the main suit index, this function finds out all card values that is either main card or main suit card
  @param: mainSuit                        the main suit index
  @return array                           all card values that is either main card or main suit card
   */

  getAllValuesOfMainAndMainSuit = function(mainSuit) {
    var i, j, k, ref, ref1, ref2, ref3, startAndEndValuesForMain, startAndEndValuesForMainSuit, valuesOfMainAndMainSuit;
    startAndEndValuesForMain = getStartAndEndValueForSuit(constants.INDEX_SUIT_MAIN);
    startAndEndValuesForMainSuit = getStartAndEndValueForSuit(mainSuit);
    valuesOfMainAndMainSuit = [];
    for (i = j = ref = startAndEndValuesForMain[0], ref1 = startAndEndValuesForMain[1] + 1; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
      valuesOfMainAndMainSuit.push(i);
    }
    for (i = k = ref2 = startAndEndValuesForMainSuit[0], ref3 = startAndEndValuesForMainSuit[1] + 1; ref2 <= ref3 ? k < ref3 : k > ref3; i = ref2 <= ref3 ? ++k : --k) {
      valuesOfMainAndMainSuit.push(i);
    }
    return valuesOfMainAndMainSuit;
  };


  /*
  Given a suit index and card values at hand, this function finds out all pairs within card values at hand that are the given suit
  @param: suitIndex                       the given suit index
  @param: cardValuesAtHand                the card values at hand
  @return: array                          all the values of pairs that satisfies the condition
   */

  getAllPairValuesAtHandForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit, i, j, pairValues, ref;
    cardValuesAtHandOfSuit = getCardValuesForSuit(suitIndex, cardValuesAtHand);
    pairValues = [];
    for (i = j = 0, ref = cardValuesAtHandOfSuit.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (cardValuesAtHandOfSuit[i] === cardValuesAtHandOfSuit[i + 1]) {
        pairValues.push(cardValuesAtHandOfSuit[i]);
      }
    }
    return pairValues;
  };


  /*
  With the given suit as main suit, this function returns all related main suit card values
  @param: mainSuit                        the main suit index
  @return: mainSuitValues                 an array that contains card values including main seven, other sevens, main two, other twos and main ace
   */

  getRelativeMainSuitValues = function(mainSuit) {
    var mainSuitValues;
    mainSuitValues = {};
    switch (mainSuit) {
      case constants.INDEX_SUIT_SPADE:
        mainSuitValues.valueOfMainSuitOfSeven = constants.VALUE_SPADE_SEVEN;
        mainSuitValues.valuesOfRestSuitsOfSeven = [constants.VALUE_HEART_SEVEN, constants.VALUE_CLUB_SEVEN, constants.VALUE_DIAMOND_SEVEN];
        mainSuitValues.valueOfMainSuitOfTwo = constants.VALUE_SPADE_TWO;
        mainSuitValues.valuesOfRestSuitsOfTwo = [constants.VALUE_HEART_TWO, constants.VALUE_CLUB_TWO, constants.VALUE_DIAMOND_TWO];
        mainSuitValues.valueOfMainSuitOfAce = constants.VALUE_SPADE_ACE;
        break;
      case constants.INDEX_SUIT_HEART:
        mainSuitValues.valueOfMainSuitOfSeven = constants.VALUE_HEART_SEVEN;
        mainSuitValues.valuesOfRestSuitsOfSeven = [constants.VALUE_SPADE_SEVEN, constants.VALUE_CLUB_SEVEN, constants.VALUE_DIAMOND_SEVEN];
        mainSuitValues.valueOfMainSuitOfTwo = constants.VALUE_HEART_TWO;
        mainSuitValues.valuesOfRestSuitsOfTwo = [constants.VALUE_SPADE_TWO, constants.VALUE_CLUB_TWO, constants.VALUE_DIAMOND_TWO];
        mainSuitValues.valueOfMainSuitOfAce = constants.VALUE_HEART_ACE;
        break;
      case constants.INDEX_SUIT_CLUB:
        mainSuitValues.valueOfMainSuitOfSeven = constants.VALUE_CLUB_SEVEN;
        mainSuitValues.valuesOfRestSuitsOfSeven = [constants.VALUE_SPADE_SEVEN, constants.VALUE_HEART_SEVEN, constants.VALUE_DIAMOND_SEVEN];
        mainSuitValues.valueOfMainSuitOfTwo = constants.VALUE_CLUB_TWO;
        mainSuitValues.valuesOfRestSuitsOfTwo = [constants.VALUE_SPADE_TWO, constants.VALUE_HEART_TWO, constants.VALUE_DIAMOND_TWO];
        mainSuitValues.valueOfMainSuitOfAce = constants.VALUE_CLUB_ACE;
        break;
      case constants.INDEX_SUIT_DIAMOND:
        mainSuitValues.valueOfMainSuitOfSeven = constants.VALUE_DIAMOND_SEVEN;
        mainSuitValues.valuesOfRestSuitsOfSeven = [constants.VALUE_SPADE_SEVEN, constants.VALUE_HEART_SEVEN, constants.VALUE_CLUB_SEVEN];
        mainSuitValues.valueOfMainSuitOfTwo = constants.VALUE_DIAMOND_TWO;
        mainSuitValues.valuesOfRestSuitsOfTwo = [constants.VALUE_SPADE_TWO, constants.VALUE_HEART_TWO, constants.VALUE_CLUB_TWO];
        mainSuitValues.valueOfMainSuitOfAce = constants.VALUE_DIAMOND_ACE;
    }
    return mainSuitValues;
  };

  haveSingleForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit;
    cardValuesAtHandOfSuit = getCardValuesForSuit(suitIndex, cardValuesAtHand);
    if (cardValuesAtHandOfSuit.length > 0) {
      return true;
    } else {
      return false;
    }
  };

  haveSingleForMainSuit = function(mainSuit, cardValuesAtHand) {
    var cardValuesAtHandForMain, cardValuesAtHandForMainSuit;
    cardValuesAtHandForMain = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
    cardValuesAtHandForMainSuit = getCardValuesForSuit(mainSuit, cardValuesAtHand);
    if (cardValuesAtHandForMain.length > 0 || cardValuesAtHandForMainSuit.length > 0) {
      return true;
    } else {
      return false;
    }
  };

  havePairForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit, i, j, ref;
    cardValuesAtHandOfSuit = getCardValuesForSuit(suitIndex, cardValuesAtHand);
    for (i = j = 0, ref = cardValuesAtHandOfSuit.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (cardValuesAtHandOfSuit[i] === cardValuesAtHandOfSuit[i + 1]) {
        return true;
      }
    }
    return false;
  };

  havePairForMainSuit = function(mainSuit, cardValuesAtHand) {
    var cardValuesAtHandForMain, cardValuesAtHandForMainSuit, i, j, mains, ref;
    cardValuesAtHandForMain = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
    cardValuesAtHandForMainSuit = getCardValuesForSuit(mainSuit, cardValuesAtHand);
    mains = cardValuesAtHandForMain.concat(cardValuesAtHandForMainSuit);
    for (i = j = 0, ref = mains.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (mains[i] === mains[i + 1]) {
        return true;
      }
    }
    return false;
  };

  haveTractorForSuit = function(tractorLength, suitIndex, cardValuesAtHand) {
    var i, j, numOfConsecutivePairs, pairValuesAtHandOfSuit, ref;
    pairValuesAtHandOfSuit = getAllPairValuesAtHandForSuit(suitIndex, cardValuesAtHand);
    if (pairValuesAtHandOfSuit.length < tractorLength) {
      return false;
    }
    numOfConsecutivePairs = 0;
    for (i = j = 0, ref = pairValuesAtHandOfSuit.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if ((pairValuesAtHandOfSuit.length - i) < tractorLength) {
        return false;
      }
      if ((pairValuesAtHandOfSuit[i] + 1) === pairValuesAtHandOfSuit[i + 1]) {
        numOfConsecutivePairs += 1;
        if (numOfConsecutivePairs === tractorLength) {
          return true;
        }
      } else {
        numOfConsecutivePairs = 0;
      }
    }
    return false;
  };

  haveTractorForMainSuit = function(tractorLength, mainSuit, cardValuesAtHand) {
    var i, j, mainSuitValues, numOfConsecutivePairs, pairValuesAtHandOfMain, pairValuesAtHandOfSuit, pairs, ref, ref1, ref2, ref3, ref4, ref5, ref6;
    pairValuesAtHandOfMain = getAllPairValuesAtHandForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
    pairValuesAtHandOfSuit = getAllPairValuesAtHandForSuit(mainSuit, cardValuesAtHand);
    pairs = pairValuesAtHandOfMain.concat(pairValuesAtHandOfSuit);
    numOfConsecutivePairs = 0;
    mainSuitValues = getRelativeMainSuitValues(mainSuit);
    for (i = j = 0, ref = pairs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if ((pairs.length - i) < tractorLength) {
        return false;
      }
      if ((pairs[i] === 1 && pairs[i + 1] === 2) || (pairs[i] === 2 && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfSeven) || (pairs[i] === mainSuitValues.valueOfMainSuitOfSeven && (ref1 = pairs[i + 1], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref1) >= 0)) || ((ref2 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref2) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfSeven) || ((ref3 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref3) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfTwo) || (pairs[i] === mainSuitValues.valueOfMainSuitOfTwo && (ref4 = pairs[i + 1], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref4) >= 0)) || ((ref5 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref5) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfTwo) || ((ref6 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref6) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfAce) || (pairs[i] >= mainSuitValues.valueOfMainSuitOfAce && (pairs[i] + 1) === pairs[i + 1])) {
        numOfConsecutivePairs += 1;
        if (numOfConsecutivePairs === tractorLength) {
          return true;
        }
      } else {
        numOfConsecutivePairs = 0;
      }
    }
    return false;
  };

  isSingleForSuit = function(suitIndex, cardValues) {
    var startAndEndValuesForSuit;
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    if (cardValues.length === 1 && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[0] <= startAndEndValuesForSuit[1]) {
      return true;
    } else {
      return false;
    }
  };

  isSingleForMainSuit = function(mainSuit, cardValues) {
    var ref, valuesOfMainAndMainSuit;
    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
    if (cardValues.length === 1 && (ref = cardValues[0], indexOf.call(valuesOfMainAndMainSuit, ref) >= 0)) {
      return true;
    } else {
      return false;
    }
  };

  isPairForSuit = function(suitIndex, cardValues) {
    var startAndEndValuesForSuit;
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[1] <= startAndEndValuesForSuit[1]) {
      return true;
    } else {
      return false;
    }
  };

  isPairForMainSuit = function(mainSuit, cardValues) {
    var ref, valuesOfMainAndMainSuit;
    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && (ref = cardValues[i], indexOf.call(valuesOfMainAndMainSuit, ref) >= 0)) {
      return true;
    } else {
      return false;
    }
  };

  isTractorForSuit = function(tractorLength, suitIndex, cardValues) {
    var i, startAndEndValuesForSuit;
    if (tractorLength === 0 || cardValues.length < 4) {
      return false;
    }
    if (cardValues.length < tractorLength * 2 || cardValues.length % 2 !== 0) {
      return false;
    }
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    if (cardValues[0] < startAndEndValuesForSuit[0] || cardValues[cardValues.length - 1] > startAndEndValuesForSuit[1]) {
      return false;
    }
    i = 0;
    while (i < (cardValues.length - 2)) {
      if (cardValues[i] !== cardValues[i + 1] || (cardValues[i] + 1) !== cardValues[i + 2]) {
        return false;
      }
      i += 2;
    }
    return true;
  };

  isTractorForMainSuit = function(tractorLength, mainSuit, cardValues) {
    var i, j, k, mainSuitValues, pairRanks, ref, ref1, ref2, valuesOfMainAndMainSuit;
    if (tractorLength === 0 || cardValues.length < 4) {
      return false;
    }
    if (cardValues.length < tractorLength * 2 || cardValues.length % 2 !== 0) {
      return false;
    }
    mainSuitValues = getRelativeMainSuitValues(mainSuit);
    valuesOfMainAndMainSuit = getAllValuesOfMainAndMainSuit(mainSuit);
    for (i = j = 0, ref = cardValues.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (ref1 = cardValues[i], indexOf.call(valuesOfMainAndMainSuit, ref1) < 0) {
        return false;
      }
    }
    i = 0;
    pairRanks = [];
    while (i <= (cardValues.length - 2)) {
      if (cardValues[i] !== cardValues[i + 1]) {
        return false;
      } else {
        pairRanks.push(globalVariables.cardValueRanks[cardValues[i]]);
      }
      i += 2;
    }
    pairRanks = sortCards(pairRanks);
    for (i = k = 0, ref2 = pairRanks.length - 1; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
      if ((pairRanks[i] + 1) !== pairRanks[i + 1]) {
        return false;
      }
    }
    return true;
  };

  validateSelectedCardsForPlay = function(selectedCardValues, firstlyPlayedCardValues, cardValuesAtHand, mainSuit) {
    var numberOfCardsAtHandForSpecificSuit, numberOfCardsInSelectedCardsForSpecificSuit, numberOfMainCardsAtHand, numberOfMainCardsInSelectedCards, suitForFirstlyPlayedCards;
    if (selectedCardValues.length === 0) {
      return false;
    }
    if (firstlyPlayedCardValues.length > 0) {
      suitForFirstlyPlayedCards = null;
      if (isSingleForMainSuit(mainSuit, [firstlyPlayedCardValues[0]])) {
        suitForFirstlyPlayedCards = constants.INDEX_SUIT_MAIN;
      } else if (isSingleForSuit(constants.INDEX_SUIT_SPADE, [firstlyPlayedCardValues[0]])) {
        suitForFirstlyPlayedCards = constants.INDEX_SUIT_SPADE;
      } else if (isSingleForSuit(constants.INDEX_SUIT_HEART, [firstlyPlayedCardValues[0]])) {
        suitForFirstlyPlayedCards = constants.INDEX_SUIT_HEART;
      } else if (isSingleForSuit(constants.INDEX_SUIT_CLUB, [firstlyPlayedCardValues[0]])) {
        suitForFirstlyPlayedCards = constants.INDEX_SUIT_CLUB;
      } else if (isSingleForSuit(constants.INDEX_SUIT_DIAMOND, [firstlyPlayedCardValues[0]])) {
        suitForFirstlyPlayedCards = constants.INDEX_SUIT_DIAMOND;
      }
      if (selectedCardValues.length !== firstlyPlayedCardValues.length) {
        return false;
      }
      if (suitForFirstlyPlayedCards === constants.INDEX_SUIT_MAIN) {
        numberOfMainCardsInSelectedCards = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, selectedCardValues).length + getCardValuesForSuit(mainSuit, selectedCardValues).length;
        numberOfMainCardsAtHand = getCardValuesForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand).length + getCardValuesForSuit(mainSuit, cardValuesAtHand).length;
        if (numberOfMainCardsInSelectedCards < firstlyPlayedCardValues.length && numberOfMainCardsInSelectedCards !== numberOfMainCardsAtHand) {
          return false;
        }
      } else {
        numberOfCardsInSelectedCardsForSpecificSuit = getCardValuesForSuit(suitForFirstlyPlayedCards, selectedCardValues).length;
        numberOfCardsAtHandForSpecificSuit = getCardValuesForSuit(suitForFirstlyPlayedCards, cardValuesAtHand).length;
        if (numberOfCardsInSelectedCardsForSpecificSuit < firstlyPlayedCardValues.length && numberOfCardsInSelectedCardsForSpecificSuit !== numberOfCardsAtHandForSpecificSuit) {
          return false;
        }
      }
      if (isSingleForMainSuit(mainSuit, firstlyPlayedCardValues)) {
        if (haveSingleForMainSuit(mainSuit, cardValuesAtHand && !isSingleForMainSuit(mainSuit, selectedCardValues))) {
          return false;
        }
      }
      if (isSingleForSuit(suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
        if (haveSingleForSuit(suitForFirstlyPlayedCards, cardValuesAtHand && !isSingleForSuit(suitForFirstlyPlayedCards, selectedCardValues))) {
          return false;
        }
      }
      if (isPairForMainSuit(mainSuit, firstlyPlayedCardValues)) {
        if (havePairForMainSuit(mainSuit, cardValuesAtHand && !isPairForMainSuit(mainSuit, selectedCardValues))) {
          return false;
        }
      }
      if (isPairForSuit(suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
        if (havePairForSuit(suitForFirstlyPlayedCards, cardValuesAtHand && !isPairForSuit(suitForFirstlyPlayedCards, selectedCardValues))) {
          return false;
        }
      }
      if (firstlyPlayedCardValues.length % 2 === 0) {
        if (isTractorForMainSuit(firstlyPlayedCardValues.length / 2, mainSuit, firstlyPlayedCardValues)) {
          if (haveTractorForMainSuit(firstlyPlayedCardValues.length / 2, mainSuit, cardValuesAtHand && !isTractorForMainSuit(selectedCardValues.length / 2, mainSuit, selectedCardValues))) {
            return false;
          }
        }
        if (isTractorForSuit(firstlyPlayedCardValues.length / 2, suitForFirstlyPlayedCards, firstlyPlayedCardValues)) {
          if (haveTractorForSuit(firstlyPlayedCardValues.length / 2, suitForFirstlyPlayedCards, cardValuesAtHand && !isTractorForSuit(selectedCardValues.length / 2, suitForFirstlyPlayedCards, selectedCardValues))) {
            return false;
          }
        }
      }
    } else {
      if (selectedCardValues.length > 1 && selectedCardValues.length % 2 !== 0) {
        return false;
      }
      if (selectedCardValues.length === 2 && selectedCardValues[0] !== selectedCardValues[1]) {
        return false;
      }
      if (selectedCardValues.length >= 4) {
        if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_SPADE, selectedCardValues)) {
          return true;
        } else if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_HEART, selectedCardValues)) {
          return true;
        } else if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_CLUB, selectedCardValues)) {
          return true;
        } else if (isTractorForSuit(selectedCardValues.length / 2, constants.INDEX_SUIT_DIAMOND, selectedCardValues)) {
          return true;
        } else if (isTractorForMainSuit(selectedCardValues.length / 2, mainSuit, selectedCardValues)) {
          return true;
        } else {
          return false;
        }
      }
    }
    return true;
  };

  module.exports = {
    sortCards: sortCards,
    getCardName: getCardName,
    validateSelectedCardsForPlay: validateSelectedCardsForPlay,
    getCardValuesForSuit: getCardValuesForSuit,
    havePairForSuit: havePairForSuit,
    haveSingleForSuit: haveSingleForSuit,
    getAllPairValuesAtHandForSuit: getAllPairValuesAtHandForSuit,
    haveTractorForSuit: haveTractorForSuit,
    getRanksForMainSuitCards: getRanksForMainSuitCards
  };

}).call(this);
