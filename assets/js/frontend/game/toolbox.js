// Generated by CoffeeScript 1.10.0
(function() {
  var constants, getAllPairValuesAtHandForSuit, getCardName, getCardValuesAtHandForSuit, getRelativeMainSuitValues, getStartAndEndValueForSuit, globalVariables, havePairForSuit, haveSingleForSuit, haveTractorForMainSuit, haveTractorForSuit, isPairForSuit, isSingleForSuit, isTractorForMainSuit, isTractorForSuit, showPlayedCardsForUser, shuffleCards, sortCards, toggleCardSelection, validateSelectedCardsForPlay,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  constants = require('./constants.js');

  globalVariables = require('./globalVariables.js');

  shuffleCards = function() {
    var array, copy, i, j, k, l, m, n, numOfIterations, ref;
    array = [];
    for (j = k = 0; k < 2; j = ++k) {
      for (i = l = 1; l < 47; i = ++l) {
        array.push(i);
      }
    }
    copy = [];
    n = array.length;
    numOfIterations = n;
    for (i = m = 0, ref = numOfIterations; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
      j = Math.floor(Math.random() * n);
      copy.push(array[j]);
      array.splice(j, 1);
      n -= 1;
    }
    return copy;
  };

  sortCards = function(array) {
    var sortNumber;
    sortNumber = function(a, b) {
      return a - b;
    };
    return array.sort(sortNumber);
  };

  getCardName = function(n) {
    var cardName;
    cardName = '';
    switch (n) {
      case 1:
        cardName = 'bigJoker';
        break;
      case 2:
        cardName = 'smallJoker';
        break;
      case 3:
        cardName = 'sevenOfSpades';
        break;
      case 4:
        cardName = 'sevenOfHearts';
        break;
      case 5:
        cardName = 'sevenOfClubs';
        break;
      case 6:
        cardName = 'sevenOfDiamonds';
        break;
      case 7:
        cardName = 'twoOfSpades';
        break;
      case 8:
        cardName = 'twoOfHearts';
        break;
      case 9:
        cardName = 'twoOfClubs';
        break;
      case 10:
        cardName = 'twoOfDiamonds';
        break;
      case 11:
        cardName = 'aceOfSpades';
        break;
      case 12:
        cardName = 'kingOfSpades';
        break;
      case 13:
        cardName = 'queenOfSpades';
        break;
      case 14:
        cardName = 'jackOfSpades';
        break;
      case 15:
        cardName = 'tenOfSpades';
        break;
      case 16:
        cardName = 'nineOfSpades';
        break;
      case 17:
        cardName = 'eightOfSpades';
        break;
      case 18:
        cardName = 'sixOfSpades';
        break;
      case 19:
        cardName = 'fiveOfSpades';
        break;
      case 20:
        cardName = 'aceOfHearts';
        break;
      case 21:
        cardName = 'kingOfHearts';
        break;
      case 22:
        cardName = 'queenOfHearts';
        break;
      case 23:
        cardName = 'jackOfHearts';
        break;
      case 24:
        cardName = 'tenOfHearts';
        break;
      case 25:
        cardName = 'nineOfHearts';
        break;
      case 26:
        cardName = 'eightOfHearts';
        break;
      case 27:
        cardName = 'sixOfHearts';
        break;
      case 28:
        cardName = 'fiveOfHearts';
        break;
      case 29:
        cardName = 'aceOfClubs';
        break;
      case 30:
        cardName = 'kingOfClubs';
        break;
      case 31:
        cardName = 'queenOfClubs';
        break;
      case 32:
        cardName = 'jackOfClubs';
        break;
      case 33:
        cardName = 'tenOfClubs';
        break;
      case 34:
        cardName = 'nineOfClubs';
        break;
      case 35:
        cardName = 'eightOfClubs';
        break;
      case 36:
        cardName = 'sixOfClubs';
        break;
      case 37:
        cardName = 'fiveOfClubs';
        break;
      case 38:
        cardName = 'aceOfDiamonds';
        break;
      case 39:
        cardName = 'kingOfDiamonds';
        break;
      case 40:
        cardName = 'queenOfDiamonds';
        break;
      case 41:
        cardName = 'jackOfDiamonds';
        break;
      case 42:
        cardName = 'tenOfDiamonds';
        break;
      case 43:
        cardName = 'nineOfDiamonds';
        break;
      case 44:
        cardName = 'eightOfDiamonds';
        break;
      case 45:
        cardName = 'sixOfDiamonds';
        break;
      case 46:
        cardName = 'fiveOfDiamonds';
    }
    return cardName;
  };

  showPlayedCardsForUser = function(n, valuesOfPlayedCards) {
    var cardsToRemove, i, k, l, m, playedCard, ref, ref1, ref2, results, startX, startY, userPlayedCards;
    startX = null;
    startY = null;
    userPlayedCards = null;
    switch (n) {
      case 0:
        startX = globalVariables.screenWidth / 2 - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 8;
        startY = globalVariables.screenHeight - 2 * globalVariables.scaledCardHeight - 2 * constants.MARGIN;
        userPlayedCards = globalVariables.currentUserPlayedCards;
        break;
      case 1:
        startX = globalVariables.screenWidth - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 4 - constants.MARGIN;
        startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2;
        userPlayedCards = globalVariables.user1PlayedCards;
        break;
      case 2:
        startX = globalVariables.screenWidth / 2 - (valuesOfPlayedCards.length + 3) * globalVariables.scaledCardWidth / 8;
        startY = constants.MARGIN;
        userPlayedCards = globalVariables.user2PlayedCards;
        break;
      case 3:
        startX = constants.MARGIN;
        startY = globalVariables.screenHeight / 2 - globalVariables.scaledCardHeight / 2;
        userPlayedCards = globalVariables.user3PlayedCards;
    }
    cardsToRemove = [];
    for (i = k = 0, ref = userPlayedCards.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      cardsToRemove.push(userPlayedCards.children[i]);
    }
    for (i = l = 0, ref1 = cardsToRemove.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      userPlayedCards.remove(cardsToRemove[i]);
    }
    results = [];
    for (i = m = 0, ref2 = valuesOfPlayedCards.length; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
      playedCard = userPlayedCards.create(startX + i * globalVariables.scaledCardWidth / 4, startY, getCardName(valuesOfPlayedCards[i]));
      playedCard.width = globalVariables.scaledCardWidth;
      results.push(playedCard.height = globalVariables.scaledCardHeight);
    }
    return results;
  };

  toggleCardSelection = function(sprite) {
    if (!sprite.isSelected) {
      sprite.y = sprite.y - constants.SELECTED_CARD_Y_OFFSET;
    } else {
      sprite.y = sprite.y + constants.SELECTED_CARD_Y_OFFSET;
    }
    return sprite.isSelected = !sprite.isSelected;
  };

  getStartAndEndValueForSuit = function(suitIndex) {
    var endCardValueForSuit, startCardValueForSuit;
    startCardValueForSuit = 0;
    endCardValueForSuit = 0;
    switch (suitIndex) {
      case constants.INDEX_SUIT_MAIN:
        startCardValueForSuit = constants.START_VALUE_FOR_MAIN;
        endCardValueForSuit = constants.END_VALUE_FOR_MAIN;
        break;
      case constants.INDEX_SUIT_SPADE:
        startCardValueForSuit = constants.START_VALUE_FOR_SPADE;
        endCardValueForSuit = constants.END_VALUE_FOR_SPADE;
        break;
      case constants.INDEX_SUIT_HEART:
        startCardValueForSuit = constants.START_VALUE_FOR_HEART;
        endCardValueForSuit = constants.END_VALUE_FOR_HEART;
        break;
      case constants.INDEX_SUIT_CLUB:
        startCardValueForSuit = constants.START_VALUE_FOR_CLUB;
        endCardValueForSuit = constants.END_VALUE_FOR_CLUB;
        break;
      case constants.INDEX_SUIT_DIAMOND:
        startCardValueForSuit = constants.START_VALUE_FOR_DIAMOND;
        endCardValueForSuit = constants.END_VALUE_FOR_DIAMOND;
    }
    return [startCardValueForSuit, endCardValueForSuit];
  };

  getCardValuesAtHandForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit, i, k, ref, startAndEndValuesForSuit;
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    cardValuesAtHandOfSuit = [];
    for (i = k = 0, ref = cardValuesAtHand.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (cardValuesAtHand[i] >= startAndEndValuesForSuit[0] && cardValuesAtHand[i] <= startAndEndValuesForSuit[1]) {
        cardValuesAtHandOfSuit.push(cardValuesAtHand[i]);
      }
    }
    return cardValuesAtHandOfSuit;
  };

  havePairForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit, i, k, ref;
    cardValuesAtHandOfSuit = getCardValuesAtHandForSuit(suitIndex, cardValuesAtHand);
    for (i = k = 0, ref = cardValuesAtHandOfSuit.length - 1; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (cardValuesAtHandOfSuit[i] === cardValuesAtHandOfSuit[i + 1]) {
        return true;
      }
    }
    return false;
  };

  haveSingleForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit;
    cardValuesAtHandOfSuit = getCardValuesAtHandForSuit(suitIndex, cardValuesAtHand);
    if (cardValuesAtHandOfSuit.length > 0) {
      return true;
    } else {
      return false;
    }
  };

  getAllPairValuesAtHandForSuit = function(suitIndex, cardValuesAtHand) {
    var cardValuesAtHandOfSuit, i, k, pairValues, ref;
    cardValuesAtHandOfSuit = getCardValuesAtHandForSuit(suitIndex, cardValuesAtHand);
    pairValues = [];
    for (i = k = 0, ref = cardValuesAtHandOfSuit.length - 1; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (cardValuesAtHandOfSuit[i] === cardValuesAtHandOfSuit[i + 1]) {
        pairValues.push(cardValuesAtHandOfSuit[i]);
      }
    }
    return pairValues;
  };

  haveTractorForSuit = function(suitIndex, tractorLength, cardValuesAtHand) {
    var i, k, numOfConsecutivePairs, pairValuesAtHandOfSuit, ref;
    pairValuesAtHandOfSuit = getAllPairValuesAtHandForSuit(suitIndex, cardValuesAtHand);
    if (pairValuesAtHandOfSuit.length < tractorLength) {
      return false;
    }
    numOfConsecutivePairs = 0;
    for (i = k = 0, ref = pairValuesAtHandOfSuit.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if ((pairValuesAtHandOfSuit.length - i) < tractorLength) {
        return false;
      }
      if ((pairValuesAtHandOfSuit[i] + 1) === pairValuesAtHandOfSuit[i + 1]) {
        numOfConsecutivePairs += 1;
        if (numOfConsecutivePairs === tractorLength) {
          return true;
        }
      } else {
        numOfConsecutivePairs = 0;
      }
    }
    return false;
  };

  getRelativeMainSuitValues = function(mainSuit) {
    var mainSuitValues;
    mainSuitValues = {};
    switch (mainSuit) {
      case constants.INDEX_SUIT_SPADE:
        mainSuitValues.valueOfMainSuitOfSeven = 3;
        mainSuitValues.valuesOfRestSuitsOfSeven = [4, 5, 6];
        mainSuitValues.valueOfMainSuitOfTwo = 7;
        mainSuitValues.valuesOfRestSuitsOfTwo = [8, 9, 10];
        mainSuitValues.valueOfMainSuitOfAce = 11;
        break;
      case constants.INDEX_SUIT_HEART:
        mainSuitValues.valueOfMainSuitOfSeven = 4;
        mainSuitValues.valuesOfRestSuitsOfSeven = [3, 5, 6];
        mainSuitValues.valueOfMainSuitOfTwo = 8;
        mainSuitValues.valuesOfRestSuitsOfTwo = [7, 9, 10];
        mainSuitValues.valueOfMainSuitOfAce = 20;
        break;
      case constants.INDEX_SUIT_CLUB:
        mainSuitValues.valueOfMainSuitOfSeven = 5;
        mainSuitValues.valuesOfRestSuitsOfSeven = [3, 4, 6];
        mainSuitValues.valueOfMainSuitOfTwo = 9;
        mainSuitValues.valuesOfRestSuitsOfTwo = [7, 8, 10];
        mainSuitValues.valueOfMainSuitOfAce = 29;
        break;
      case constants.INDEX_SUIT_DIAMOND:
        mainSuitValues.valueOfMainSuitOfSeven = 6;
        mainSuitValues.valuesOfRestSuitsOfSeven = [3, 4, 5];
        mainSuitValues.valueOfMainSuitOfTwo = 10;
        mainSuitValues.valuesOfRestSuitsOfTwo = [7, 8, 9];
        mainSuitValues.valueOfMainSuitOfAce = 38;
    }
    return mainSuitValues;
  };

  haveTractorForMainSuit = function(tractorLength, cardValuesAtHand, mainSuit) {
    var i, k, mainSuitValues, numOfConsecutivePairs, pairValuesAtHandOfMain, pairValuesAtHandOfSuit, pairs, ref, ref1, ref2, ref3, ref4, ref5, ref6;
    pairValuesAtHandOfMain = getAllPairValuesAtHandForSuit(constants.INDEX_SUIT_MAIN, cardValuesAtHand);
    pairValuesAtHandOfSuit = getAllPairValuesAtHandForSuit(mainSuit, cardValuesAtHand);
    pairs = pairValuesAtHandOfMain.concat(pairValuesAtHandOfSuit);
    numOfConsecutivePairs = 0;
    mainSuitValues = getRelativeMainSuitValues(mainSuit);
    for (i = k = 0, ref = pairs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if ((pairs.length - i) < tractorLength) {
        return false;
      }
      if ((pairs[i] === 1 && pairs[i + 1] === 2) || (pairs[i] === 2 && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfSeven) || (pairs[i] === mainSuitValues.valueOfMainSuitOfSeven && (ref1 = pairs[i + 1], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref1) >= 0)) || ((ref2 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref2) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfSeven) || ((ref3 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref3) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfTwo) || (pairs[i] === mainSuitValues.valueOfMainSuitOfTwo && (ref4 = pairs[i + 1], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref4) >= 0)) || ((ref5 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref5) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfTwo) || ((ref6 = pairs[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref6) >= 0) && pairs[i + 1] === mainSuitValues.valueOfMainSuitOfAce) || (pairs[i] >= mainSuitValues.valueOfMainSuitOfAce && (pairs[i] + 1) === pairs[i + 1])) {
        numOfConsecutivePairs += 1;
        if (numOfConsecutivePairs === tractorLength) {
          return true;
        }
      } else {
        numOfConsecutivePairs = 0;
      }
    }
    return false;
  };

  isSingleForSuit = function(suitIndex, cardValues) {
    var startAndEndValuesForSuit;
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    if (cardValues.length === 1 && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[0] <= startAndEndValuesForSuit[1]) {
      return true;
    } else {
      return false;
    }
  };

  isPairForSuit = function(suitIndex, cardValues) {
    var startAndEndValuesForSuit;
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    if (cardValues.length === 2 && cardValues[0] === cardValues[1] && cardValues[0] >= startAndEndValuesForSuit[0] && cardValues[1] <= startAndEndValuesForSuit[1]) {
      return true;
    } else {
      return false;
    }
  };

  isTractorForSuit = function(suitIndex, cardValues) {
    var i, startAndEndValuesForSuit;
    if (cardValues.length < 4 || cardValues.length % 2 !== 0) {
      return false;
    }
    startAndEndValuesForSuit = getStartAndEndValueForSuit(suitIndex);
    if (cardValues[0] < startAndEndValuesForSuit[0] || cardValues[cardValues.length - 1] > startAndEndValuesForSuit[1]) {
      return false;
    }
    i = 0;
    while (i < (cardValues.length - 2)) {
      if (cardValues[i] !== cardValues[i + 1] || (cardValues[i] + 1) !== cardValues[i + 2]) {
        return false;
      }
      i += 2;
    }
    return true;
  };

  isTractorForMainSuit = function(mainSuit, cardValues) {
    var i, k, l, m, mainSuitValues, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, startAndEndValuesForMain, startAndEndValuesForMainSuit, valuesOfMainAndMainSuit;
    if (cardValues.length < 4 || cardValues.length % 2 !== 0) {
      return false;
    }
    mainSuitValues = getRelativeMainSuitValues(mainSuit);
    startAndEndValuesForMain = getStartAndEndValueForSuit(constants.INDEX_SUIT_MAIN);
    startAndEndValuesForMainSuit = getStartAndEndValueForSuit(mainSuit);
    valuesOfMainAndMainSuit = [];
    for (i = k = ref = startAndEndValuesForMain[0], ref1 = startAndEndValuesForMain[1] + 1; ref <= ref1 ? k < ref1 : k > ref1; i = ref <= ref1 ? ++k : --k) {
      valuesOfMainAndMainSuit.push(i);
    }
    for (i = l = ref2 = startAndEndValuesForMainSuit[0], ref3 = startAndEndValuesForMainSuit[1] + 1; ref2 <= ref3 ? l < ref3 : l > ref3; i = ref2 <= ref3 ? ++l : --l) {
      valuesOfMainAndMainSuit.push(i);
    }
    for (i = m = 0, ref4 = cardValues.length; 0 <= ref4 ? m < ref4 : m > ref4; i = 0 <= ref4 ? ++m : --m) {
      if (ref5 = cardValues[i], indexOf.call(valuesOfMainAndMainSuit, ref5) < 0) {
        return false;
      }
    }
    i = 0;
    while (i < (cardValues.length - 2)) {
      if (cardValues[i] !== cardValues[i + 1]) {
        return false;
      } else if (cardValues[i] === 1 && cardValues[i + 2] !== 2) {
        return false;
      } else if (cardValues[i] === 2 && cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfSeven) {
        return false;
      } else if (cardValues[i] === mainSuitValues.valueOfMainSuitOfSeven && (ref6 = cardValues[i + 2], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref6) < 0)) {
        return false;
      } else if ((ref7 = cardValues[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfSeven, ref7) >= 0) && (cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfSeven && cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfTwo)) {
        return false;
      } else if (cardValues[i] === mainSuitValues.valueOfMainSuitOfTwo && (ref8 = cardValues[i + 2], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref8) < 0)) {
        return false;
      } else if ((ref9 = cardValues[i], indexOf.call(mainSuitValues.valuesOfRestSuitsOfTwo, ref9) >= 0) && (cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfTwo && cardValues[i + 2] !== mainSuitValues.valueOfMainSuitOfAce)) {
        return false;
      } else if (cardValues[i] >= mainSuitValues.valueOfMainSuitOfAce && (cardValues[i] + 1) !== cardValues[i + 2]) {
        return false;
      }
      i += 2;
    }
    return true;
  };

  validateSelectedCardsForPlay = function(selectedCardValues, firstlyPlayedCardValues) {
    if (selectedCardValues.length === 0) {
      return false;
    }
    if (isSingleForSuit(constants.INDEX_SUIT_MAIN, selectedCardValues)) {
      console.log('MAIN single');
    }
    if (isSingleForSuit(constants.INDEX_SUIT_SPADE, selectedCardValues)) {
      console.log('SPADE single');
    }
    if (isSingleForSuit(constants.INDEX_SUIT_HEART, selectedCardValues)) {
      console.log('HEART single');
    }
    if (isSingleForSuit(constants.INDEX_SUIT_CLUB, selectedCardValues)) {
      console.log('CLUB single');
    }
    if (isSingleForSuit(constants.INDEX_SUIT_DIAMOND, selectedCardValues)) {
      console.log('DIAMOND single');
    }
    if (isPairForSuit(constants.INDEX_SUIT_MAIN, selectedCardValues)) {
      console.log('MAIN pair');
    }
    if (isPairForSuit(constants.INDEX_SUIT_SPADE, selectedCardValues)) {
      console.log('SPADE pair');
    }
    if (isPairForSuit(constants.INDEX_SUIT_HEART, selectedCardValues)) {
      console.log('HEART pair');
    }
    if (isPairForSuit(constants.INDEX_SUIT_CLUB, selectedCardValues)) {
      console.log('CLUB pair');
    }
    if (isPairForSuit(constants.INDEX_SUIT_DIAMOND, selectedCardValues)) {
      console.log('DIAMOND pair');
    }
    if (isTractorForSuit(constants.INDEX_SUIT_SPADE, selectedCardValues)) {
      console.log('SPADE tractor !!!!!!');
    }
    if (isTractorForSuit(constants.INDEX_SUIT_HEART, selectedCardValues)) {
      console.log('HEART tractor !!!!!!');
    }
    if (isTractorForSuit(constants.INDEX_SUIT_CLUB, selectedCardValues)) {
      console.log('CLUB tractor !!!!!!');
    }
    if (isTractorForSuit(constants.INDEX_SUIT_DIAMOND, selectedCardValues)) {
      console.log('DIAMOND tractor !!!!!!');
    }
    if (isTractorForMainSuit(constants.INDEX_SUIT_SPADE, selectedCardValues)) {
      console.log('SPADE tractor for main!!!!!!');
    }
    if (isTractorForMainSuit(constants.INDEX_SUIT_HEART, selectedCardValues)) {
      console.log('HEART tractor for main!!!!!!');
    }
    if (isTractorForMainSuit(constants.INDEX_SUIT_CLUB, selectedCardValues)) {
      console.log('CLUB tractor for main!!!!!!');
    }
    if (isTractorForMainSuit(constants.INDEX_SUIT_DIAMOND, selectedCardValues)) {
      console.log('DIAMOND tractor for main!!!!!!');
    }
    return false;
  };

  module.exports = {
    sortCards: sortCards,
    getCardName: getCardName,
    toggleCardSelection: toggleCardSelection,
    showPlayedCardsForUser: showPlayedCardsForUser,
    validateSelectedCardsForPlay: validateSelectedCardsForPlay,
    getCardValuesAtHandForSuit: getCardValuesAtHandForSuit,
    havePairForSuit: havePairForSuit,
    haveSingleForSuit: haveSingleForSuit,
    getAllPairValuesAtHandForSuit: getAllPairValuesAtHandForSuit,
    haveTractorForSuit: haveTractorForSuit,
    shuffleCards: shuffleCards
  };

}).call(this);
